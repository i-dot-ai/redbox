{"mappings":"A,C,K,I,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,A,C,E,E,Q,A,E,Q,S,C,C,C,ECEA,MAAM,UAAmB,YACvB,mBAAoB,CAClB,IAAM,EAAc,UAKlB,IAAM,EAAW,MAAM,MACrB,mBAA8B,IAAI,CAAC,OAAO,CAAC,EAAE,EAAE,EAE3C,EAAc,MAAM,EAAS,IAAI,GAIvC,GAHA,IAAI,CAAC,WAAW,CAAG,EAAY,MAAM,CACrC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAG,EAAY,MAAM,CAAC,WAAW,GAEhD,AAAqC,aAArC,EAAY,MAAM,CAAC,WAAW,GAAmB,CACnD,IAAM,EAAM,IAAI,YAAY,eAAgB,CAC1C,OAAQ,IAAI,AACd,GACA,SAAS,IAAI,CAAC,aAAa,CAAC,EAC9B,MACE,OAAO,UAAU,CAAC,EAfM,IAiB5B,EAEA,GACF,CACF,CACA,eAAe,MAAM,CAAC,cAAe,E,EE1BrC,OAAM,UAAgB,YACpB,mBAAoB,CAElB,IAEI,EAFA,EAA4B,SAAS,aAAa,CAAC,MAGvD,CAAA,EAA0B,IAAI,CAAG,QACjC,EAA0B,YAAY,CAAC,YAAa,aACpD,EAA0B,SAAS,CAAC,GAAG,CAAC,yBACxC,IAAI,CAAC,WAAW,CAAC,GAEjB,SAAS,IAAI,CAAC,gBAAgB,CAAC,eAAgB,AAAC,IAE9C,IAAM,EAA0C,EAAK,MAAM,CAAC,OAAO,CACjE,uBAEF,EAAa,aAAa,CAAC,eAAe,MAAM,GAChD,IAAI,CAAC,aAAa,CAAC,UAAU,YAAY,GAGzC,IAAM,EAAU,EAAa,aAAa,CACxC,kCACA,WAAW,AACb,CAAA,EAA0B,WAAW,CAAG,CAAC,qBAAqB,EAAE,EAAA,CAAS,CACzE,aAAa,GACb,EAAiC,OAAO,UAAU,CAAC,KACjD,EAA0B,WAAW,CAAG,EAC1C,EAAG,EACL,EACF,CACF,CACA,eAAe,MAAM,CAAC,WAAY,G,E,Q,C","sources":["<anon>","src/js/web-components/documents/file-status.js","src/js/documents.js","src/js/web-components/documents/doc-list.js"],"sourcesContent":["(() => {\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire94c2\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire94c2\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"kTS3p\", function(module, exports) {\n// @ts-check\nclass $f372dfae70b38cba$var$FileStatus extends HTMLElement {\n    connectedCallback() {\n        const checkStatus = async ()=>{\n            // UPDATE THESE AS REQUIRED\n            const FILE_STATUS_ENDPOINT = \"/file-status\";\n            const CHECK_INTERVAL_MS = 6000;\n            const response = await fetch(`${FILE_STATUS_ENDPOINT}?id=${this.dataset.id}`);\n            const responseObj = await response.json();\n            this.textContent = responseObj.status;\n            this.dataset.status = responseObj.status.toLowerCase();\n            if (responseObj.status.toLowerCase() === \"complete\") {\n                const evt = new CustomEvent(\"doc-complete\", {\n                    detail: this\n                });\n                document.body.dispatchEvent(evt);\n            } else window.setTimeout(checkStatus, CHECK_INTERVAL_MS);\n        };\n        checkStatus();\n    }\n}\ncustomElements.define(\"file-status\", $f372dfae70b38cba$var$FileStatus);\n\n});\n\n// @ts-check\n/** So completed docs can be added to this list */ class $21a37cd47d4ace41$var$DocList extends HTMLElement {\n    connectedCallback() {\n        // Setup screen-reader announcements\n        let screenReaderAnnouncements = document.createElement(\"div\");\n        /** @type {number} */ let screenReaderAnnouncementsTimer;\n        screenReaderAnnouncements.role = \"alert\";\n        screenReaderAnnouncements.setAttribute(\"aria-live\", \"assertive\");\n        screenReaderAnnouncements.classList.add(\"govuk-visually-hidden\");\n        this.appendChild(screenReaderAnnouncements);\n        document.body.addEventListener(\"doc-complete\", (evt)=>{\n            // Move completed doc to this list\n            const completedDoc = /** @type{CustomEvent} */ evt.detail.closest(\".iai-doc-list__item\");\n            completedDoc.querySelector(\"file-status\").remove();\n            this.querySelector(\"tbody\")?.appendChild(completedDoc);\n            // Announce doc is ready to screen-reader users\n            const docName = completedDoc.querySelector(\".iai-doc-list__cell--file-name\").textContent;\n            screenReaderAnnouncements.textContent = `Processing Complete: ${docName}`;\n            clearTimeout(screenReaderAnnouncementsTimer);\n            screenReaderAnnouncementsTimer = window.setTimeout(()=>{\n                screenReaderAnnouncements.textContent = \"\";\n            }, 1);\n        });\n    }\n}\ncustomElements.define(\"doc-list\", $21a37cd47d4ace41$var$DocList);\n\n\nparcelRequire(\"kTS3p\");\n\n})();\n//# sourceMappingURL=documents.js.map\n","// @ts-check\n\nclass FileStatus extends HTMLElement {\n  connectedCallback() {\n    const checkStatus = async () => {\n      // UPDATE THESE AS REQUIRED\n      const FILE_STATUS_ENDPOINT = \"/file-status\";\n      const CHECK_INTERVAL_MS = 6000;\n\n      const response = await fetch(\n        `${FILE_STATUS_ENDPOINT}?id=${this.dataset.id}`\n      );\n      const responseObj = await response.json();\n      this.textContent = responseObj.status;\n      this.dataset.status = responseObj.status.toLowerCase();\n\n      if (responseObj.status.toLowerCase() === \"complete\") {\n        const evt = new CustomEvent(\"doc-complete\", {\n          detail: this,\n        });\n        document.body.dispatchEvent(evt);\n      } else {\n        window.setTimeout(checkStatus, CHECK_INTERVAL_MS);\n      }\n    };\n\n    checkStatus();\n  }\n}\ncustomElements.define(\"file-status\", FileStatus);\n","import \"./web-components/documents/doc-list.js\";\nimport \"./web-components/documents/file-status.js\";\n","// @ts-check\n\n/** So completed docs can be added to this list */\nclass DocList extends HTMLElement {\n  connectedCallback() {\n    // Setup screen-reader announcements\n    let screenReaderAnnouncements = document.createElement(\"div\");\n    /** @type {number} */\n    let screenReaderAnnouncementsTimer;\n    screenReaderAnnouncements.role = \"alert\";\n    screenReaderAnnouncements.setAttribute(\"aria-live\", \"assertive\");\n    screenReaderAnnouncements.classList.add(\"govuk-visually-hidden\");\n    this.appendChild(screenReaderAnnouncements);\n\n    document.body.addEventListener(\"doc-complete\", (evt) => {\n      // Move completed doc to this list\n      const completedDoc = /** @type{CustomEvent} */ (evt).detail.closest(\n        \".iai-doc-list__item\"\n      );\n      completedDoc.querySelector(\"file-status\").remove();\n      this.querySelector(\"tbody\")?.appendChild(completedDoc);\n\n      // Announce doc is ready to screen-reader users\n      const docName = completedDoc.querySelector(\n        \".iai-doc-list__cell--file-name\"\n      ).textContent;\n      screenReaderAnnouncements.textContent = `Processing Complete: ${docName}`;\n      clearTimeout(screenReaderAnnouncementsTimer);\n      screenReaderAnnouncementsTimer = window.setTimeout(() => {\n        screenReaderAnnouncements.textContent = \"\";\n      }, 1);\n    });\n  }\n}\ncustomElements.define(\"doc-list\", DocList);\n"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","$f372dfae70b38cba$var$FileStatus","HTMLElement","connectedCallback","checkStatus","response","fetch","dataset","responseObj","json","textContent","status","toLowerCase","evt","CustomEvent","detail","document","body","dispatchEvent","window","setTimeout","customElements","define","$21a37cd47d4ace41$var$DocList","screenReaderAnnouncementsTimer","screenReaderAnnouncements","createElement","role","setAttribute","classList","add","appendChild","addEventListener","completedDoc","closest","querySelector","remove","docName","clearTimeout"],"version":3,"file":"documents.js.map"}