# Generated by Django 5.1.7 on 2025-03-12 15:50

import django.contrib.postgres.fields
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import django_use_email_as_username.models
import redbox_app.redbox_core.models
import storages.backends.s3
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('django_q', '0018_task_success_index'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('password', models.CharField(blank=True, max_length=128, null=True, verbose_name='password')),
                ('grade', models.CharField(blank=True, choices=[('AA', 'AA'), ('AO', 'AO'), ('DD', 'Deputy Director'), ('D', 'Director'), ('DG', 'Director General'), ('EO', 'EO'), ('G6', 'G6'), ('G7', 'G7'), ('HEO', 'HEO'), ('PS', 'Permanent Secretary'), ('SEO', 'SEO'), ('OT', 'Other')], max_length=3, null=True)),
                ('name', models.CharField(blank=True, null=True)),
                ('ai_experience', models.CharField(blank=True, choices=[('Curious Newcomer', "I haven't used Generative AI tools"), ('Cautious Explorer', 'I have a little experience using Generative AI tools'), ('Enthusiastic Experimenter', 'I occasionally use Generative AI tools but am still experimenting with their capabilities'), ('Experienced Navigator', 'I use Generative AI tools regularly and have a good understanding of their strengths and limitations'), ('AI Alchemist', 'I have extensive experience with Generative AI tools and can leverage them effectively in various contexts')], max_length=25, null=True)),
                ('profession', models.CharField(blank=True, choices=[('AN', 'Analysis'), ('CMC', 'Commercial'), ('COM', 'Communications'), ('CFIN', 'Corporate finance'), ('CF', 'Counter fraud'), ('DDT', 'Digital, data and technology'), ('EC', 'Economics'), ('FIN', 'Finance'), ('FEDG', 'Fraud, error, debts and grants'), ('HR', 'Human resources'), ('IA', 'Intelligence analysis'), ('IAUD', 'Internal audit'), ('IT', 'International trade'), ('KIM', 'Knowledge and information management'), ('LG', 'Legal'), ('MD', 'Medical'), ('OP', 'Occupational psychology'), ('OD', 'Operational delivery'), ('OR', 'Operational research'), ('PL', 'Planning'), ('PI', 'Planning inspection'), ('POL', 'Policy'), ('PD', 'Project delivery'), ('PR', 'Property'), ('SE', 'Science and engineering'), ('SC', 'Security'), ('SR', 'Social research'), ('ST', 'Statistics'), ('TX', 'Tax'), ('VET', 'Veterinary'), ('OT', 'Other')], max_length=4, null=True)),
                ('info_about_user', models.CharField(blank=True, help_text='user entered info from profile overlay', null=True)),
                ('redbox_response_preferences', models.CharField(blank=True, help_text='user entered info from profile overlay, to be used in custom prompt', null=True)),
                ('is_developer', models.BooleanField(blank=True, default=False, help_text='is this user a developer?', null=True)),
                ('role', models.TextField(blank=True, null=True)),
                ('accessibility_options', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('Prefer not to say', 'Prefer not to say')], max_length=64, null=True)),
                ('accessibility_categories', models.CharField(blank=True, choices=[('Sight', "I'm blind, partially sighted or colour blind"), ('Hearing', "I'm deaf or hard of hearing"), ('Mobility', 'I have difficulty using a mouse or keyboard'), ('Thinking and understanding', 'I have autism, dyslexia, ADHD, a mental health condition'), ('Temporary', 'I have an injury'), ('Invisible condition', 'This could be menopause, a mental health condition')], max_length=64, null=True)),
                ('accessibility_description', models.TextField(blank=True, null=True)),
                ('digital_confidence', models.CharField(blank=True, choices=[('I feel confident using new technologies and digital products', 'I feel confident using new technologies and digital products'), ('When using new technologies and digital products I tend to need some help', 'When using new technologies and digital products I tend to need some help'), ("I don't use new technologies and I don't want to learn how to use them", "I don't use new technologies and I don't want to learn how to use them")], max_length=128, null=True)),
                ('usage_at_work', models.CharField(blank=True, choices=[('I have not used GenAI', 'I have not used GenAI'), ('Everyday', 'Everyday'), ('Weekly - a few times per week', 'Weekly - a few times per week'), ('Monthly - a few times per month', 'Monthly - a few times per month'), ('Not much at all - tried once or twice', 'Not much at all - tried once or twice')], max_length=64, null=True)),
                ('usage_outside_work', models.CharField(blank=True, choices=[('I have not used GenAI', 'I have not used GenAI'), ('Everyday', 'Everyday'), ('Weekly - a few times per week', 'Weekly - a few times per week'), ('Monthly - a few times per month', 'Monthly - a few times per month'), ('Not much at all - tried once or twice', 'Not much at all - tried once or twice')], max_length=64, null=True)),
                ('how_useful', models.CharField(blank=True, choices=[('I have not used GenAI', 'I have not used GenAI'), ("I have not used GenAI enough to say if it's useful or not", "I have not used GenAI enough to say if it's useful or not"), ('I have not figured out how to best use GenAI', 'I have not figured out how to best use GenAI'), ('I have found a few things GenAI really helps me with', 'I have found a few things GenAI really helps me with'), ('GenAI has proved useful for many different tasks', 'GenAI has proved useful for many different tasks')], max_length=64, null=True)),
                ('redbox_tasks', models.TextField(blank=True, null=True)),
                ('task_1_description', models.TextField(blank=True, null=True)),
                ('task_1_regularity', models.TextField(blank=True, null=True)),
                ('task_1_duration', models.TextField(blank=True, null=True)),
                ('task_1_consider_using_ai', models.CharField(blank=True, choices=[('No', 'No'), ('Maybe (or unsure)', 'Maybe (or unsure)'), ('Yes', 'Yes'), ('Yes! I already use GenAI for this', 'Yes! I already use GenAI for this')], max_length=64, null=True)),
                ('task_2_description', models.TextField(blank=True, null=True)),
                ('task_2_regularity', models.TextField(blank=True, null=True)),
                ('task_2_duration', models.TextField(blank=True, null=True)),
                ('task_2_consider_using_ai', models.CharField(blank=True, choices=[('No', 'No'), ('Maybe (or unsure)', 'Maybe (or unsure)'), ('Yes', 'Yes'), ('Yes! I already use GenAI for this', 'Yes! I already use GenAI for this')], max_length=64, null=True)),
                ('task_3_description', models.TextField(blank=True, null=True)),
                ('task_3_regularity', models.TextField(blank=True, null=True)),
                ('task_3_duration', models.TextField(blank=True, null=True)),
                ('task_3_consider_using_ai', models.CharField(blank=True, choices=[('No', 'No'), ('Maybe (or unsure)', 'Maybe (or unsure)'), ('Yes', 'Yes'), ('Yes! I already use GenAI for this', 'Yes! I already use GenAI for this')], max_length=64, null=True)),
                ('role_regularity_summarise_large_docs', models.CharField(blank=True, choices=[('I do not do this task', 'I do not do this task'), ('Everyday', 'Everyday'), ('Weekly', 'Weekly'), ('Monthly', 'Monthly'), ('Quarterly', 'Quarterly'), ('Yearly', 'Yearly')], max_length=32, null=True)),
                ('role_regularity_condense_multiple_docs', models.CharField(blank=True, choices=[('I do not do this task', 'I do not do this task'), ('Everyday', 'Everyday'), ('Weekly', 'Weekly'), ('Monthly', 'Monthly'), ('Quarterly', 'Quarterly'), ('Yearly', 'Yearly')], max_length=32, null=True)),
                ('role_regularity_search_across_docs', models.CharField(blank=True, choices=[('I do not do this task', 'I do not do this task'), ('Everyday', 'Everyday'), ('Weekly', 'Weekly'), ('Monthly', 'Monthly'), ('Quarterly', 'Quarterly'), ('Yearly', 'Yearly')], max_length=32, null=True)),
                ('role_regularity_compare_multiple_docs', models.CharField(blank=True, choices=[('I do not do this task', 'I do not do this task'), ('Everyday', 'Everyday'), ('Weekly', 'Weekly'), ('Monthly', 'Monthly'), ('Quarterly', 'Quarterly'), ('Yearly', 'Yearly')], max_length=32, null=True)),
                ('role_regularity_specific_template', models.CharField(blank=True, choices=[('I do not do this task', 'I do not do this task'), ('Everyday', 'Everyday'), ('Weekly', 'Weekly'), ('Monthly', 'Monthly'), ('Quarterly', 'Quarterly'), ('Yearly', 'Yearly')], max_length=32, null=True)),
                ('role_regularity_shorten_docs', models.CharField(blank=True, choices=[('I do not do this task', 'I do not do this task'), ('Everyday', 'Everyday'), ('Weekly', 'Weekly'), ('Monthly', 'Monthly'), ('Quarterly', 'Quarterly'), ('Yearly', 'Yearly')], max_length=32, null=True)),
                ('role_regularity_write_docs', models.CharField(blank=True, choices=[('I do not do this task', 'I do not do this task'), ('Everyday', 'Everyday'), ('Weekly', 'Weekly'), ('Monthly', 'Monthly'), ('Quarterly', 'Quarterly'), ('Yearly', 'Yearly')], max_length=32, null=True)),
                ('role_duration_summarise_large_docs', models.CharField(blank=True, choices=[('I do not do this task', 'I do not do this task'), ('1 to 15 minutes', '1 to 15 minutes'), ('15 to 60 minutes', '15 to 60 minutes'), ('1 to 4 hours', '1 to 4 hours'), ('4 to 8 hours', '4 to 8 hours'), ('1 to 2 days', '1 to 2 days'), ('More than 2 days', 'More than 2 days'), ('More than a week', 'More than a week')], max_length=32, null=True)),
                ('role_duration_condense_multiple_docs', models.CharField(blank=True, choices=[('I do not do this task', 'I do not do this task'), ('1 to 15 minutes', '1 to 15 minutes'), ('15 to 60 minutes', '15 to 60 minutes'), ('1 to 4 hours', '1 to 4 hours'), ('4 to 8 hours', '4 to 8 hours'), ('1 to 2 days', '1 to 2 days'), ('More than 2 days', 'More than 2 days'), ('More than a week', 'More than a week')], max_length=32, null=True)),
                ('role_duration_search_across_docs', models.CharField(blank=True, choices=[('I do not do this task', 'I do not do this task'), ('1 to 15 minutes', '1 to 15 minutes'), ('15 to 60 minutes', '15 to 60 minutes'), ('1 to 4 hours', '1 to 4 hours'), ('4 to 8 hours', '4 to 8 hours'), ('1 to 2 days', '1 to 2 days'), ('More than 2 days', 'More than 2 days'), ('More than a week', 'More than a week')], max_length=32, null=True)),
                ('role_duration_compare_multiple_docs', models.CharField(blank=True, choices=[('I do not do this task', 'I do not do this task'), ('1 to 15 minutes', '1 to 15 minutes'), ('15 to 60 minutes', '15 to 60 minutes'), ('1 to 4 hours', '1 to 4 hours'), ('4 to 8 hours', '4 to 8 hours'), ('1 to 2 days', '1 to 2 days'), ('More than 2 days', 'More than 2 days'), ('More than a week', 'More than a week')], max_length=32, null=True)),
                ('role_duration_specific_template', models.CharField(blank=True, choices=[('I do not do this task', 'I do not do this task'), ('1 to 15 minutes', '1 to 15 minutes'), ('15 to 60 minutes', '15 to 60 minutes'), ('1 to 4 hours', '1 to 4 hours'), ('4 to 8 hours', '4 to 8 hours'), ('1 to 2 days', '1 to 2 days'), ('More than 2 days', 'More than 2 days'), ('More than a week', 'More than a week')], max_length=32, null=True)),
                ('role_duration_shorten_docs', models.CharField(blank=True, choices=[('I do not do this task', 'I do not do this task'), ('1 to 15 minutes', '1 to 15 minutes'), ('15 to 60 minutes', '15 to 60 minutes'), ('1 to 4 hours', '1 to 4 hours'), ('4 to 8 hours', '4 to 8 hours'), ('1 to 2 days', '1 to 2 days'), ('More than 2 days', 'More than 2 days'), ('More than a week', 'More than a week')], max_length=32, null=True)),
                ('role_duration_write_docs', models.CharField(blank=True, choices=[('I do not do this task', 'I do not do this task'), ('1 to 15 minutes', '1 to 15 minutes'), ('15 to 60 minutes', '15 to 60 minutes'), ('1 to 4 hours', '1 to 4 hours'), ('4 to 8 hours', '4 to 8 hours'), ('1 to 2 days', '1 to 2 days'), ('More than 2 days', 'More than 2 days'), ('More than a week', 'More than a week')], max_length=32, null=True)),
                ('consent_research', models.BooleanField(blank=True, default=False, null=True)),
                ('consent_interviews', models.BooleanField(blank=True, default=False, null=True)),
                ('consent_feedback', models.BooleanField(blank=True, default=False, null=True)),
                ('consent_condfidentiality', models.BooleanField(blank=True, default=False, null=True)),
                ('consent_understand', models.BooleanField(blank=True, default=False, null=True)),
                ('consent_agreement', models.BooleanField(blank=True, default=False, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', django_use_email_as_username.models.BaseUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ChatLLMBackend',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the model, e.g. “gpt-4o”, “claude-3-opus-20240229”.', max_length=128)),
                ('provider', models.CharField(choices=[('openai', 'Openai'), ('anthropic', 'Anthropic'), ('azure_openai', 'Azure Openai'), ('google_vertexai', 'Google Vertexai'), ('google_genai', 'Google Genai'), ('bedrock', 'Bedrock'), ('bedrock_converse', 'Bedrock Converse'), ('cohere', 'Cohere'), ('fireworks', 'Fireworks'), ('together', 'Together'), ('mistralai', 'Mistralai'), ('huggingface', 'Huggingface'), ('groq', 'Groq'), ('ollama', 'Ollama')], help_text='The model provider', max_length=128)),
                ('description', models.TextField(blank=True, help_text='brief description of the model', null=True)),
                ('is_default', models.BooleanField(default=False, help_text='is this the default llm to use.')),
                ('enabled', models.BooleanField(default=True, help_text='is this model enabled.')),
                ('display', models.CharField(blank=True, help_text='name to display in UI.', max_length=128, null=True)),
                ('context_window_size', models.PositiveIntegerField(help_text='size of the LLM context window')),
                ('rate_limit', models.PositiveIntegerField(default=1000000, help_text='tokens per minute allowed by this model')),
            ],
            options={
                'constraints': [models.UniqueConstraint(fields=('name', 'provider'), name='unique_name_provider')],
            },
        ),
        migrations.CreateModel(
            name='Chat',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('name', models.TextField(max_length=1024)),
                ('archived', models.BooleanField(blank=True, default=False, null=True)),
                ('temperature', models.FloatField(default=0, help_text='temperature for LLM')),
                ('feedback_achieved', models.BooleanField(blank=True, help_text='Did Redbox do what you needed it to in this chat?', null=True)),
                ('feedback_saved_time', models.BooleanField(blank=True, help_text='Did Redbox help save you time?', null=True)),
                ('feedback_improved_work', models.BooleanField(blank=True, help_text='Did Redbox help to improve your work?', null=True)),
                ('feedback_notes', models.TextField(blank=True, help_text='Do you want to tell us anything further?', null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('chat_backend', models.ForeignKey(help_text='LLM to use in chat', on_delete=django.db.models.deletion.CASCADE, to='redbox_core.chatllmbackend')),
            ],
            options={
                'ordering': ['created_at'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ChatMessage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('text', models.TextField(max_length=32768)),
                ('role', models.CharField(choices=[('ai', 'Ai'), ('user', 'User'), ('system', 'System')])),
                ('rating', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('rating_text', models.TextField(blank=True, null=True)),
                ('rating_chips', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=32), blank=True, null=True, size=None)),
                ('token_count', models.PositiveIntegerField(blank=True, help_text='number of tokens in the message', null=True)),
                ('delay', models.FloatField(default=0, help_text='by how much was this message delayed in seconds')),
                ('chat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='redbox_core.chat')),
            ],
            options={
                'ordering': ['created_at'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DepartmentBusinessUnit',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('department', models.CharField(choices=[('Number 10', 'Number 10'), ('Cabinet Office', 'Cabinet Office'), ('Department for Science, Innovation & Technology', 'Department for Science, Innovation & Technology'), ('Other Department', 'Other Department')], default='Other Department', help_text='Government department', max_length=64)),
                ('business_unit', models.CharField(help_text='Business Unit', max_length=128)),
            ],
            options={
                'constraints': [models.UniqueConstraint(fields=('department', 'business_unit'), name='department-business_unit-unique')],
            },
        ),
        migrations.AddField(
            model_name='user',
            name='business_unit',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='redbox_core.departmentbusinessunit'),
        ),
        migrations.CreateModel(
            name='File',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('complete', 'Complete'), ('errored', 'Errored'), ('processing', 'Processing')])),
                ('original_file', models.FileField(storage=storages.backends.s3.S3Storage, upload_to=redbox_app.redbox_core.models.build_s3_key)),
                ('last_referenced', models.DateTimeField(blank=True, null=True)),
                ('ingest_error', models.TextField(blank=True, help_text='error, if any, encountered during ingest', max_length=2048, null=True)),
                ('text', models.TextField(blank=True, help_text='text extracted from file', null=True)),
                ('token_count', models.PositiveIntegerField(blank=True, help_text='number of tokens in extracted text', null=True)),
                ('chat', models.ForeignKey(help_text='chat that this document belongs to', on_delete=django.db.models.deletion.CASCADE, to='redbox_core.chat')),
                ('task', models.ForeignKey(blank=True, help_text='pending text extraction task', null=True, on_delete=django.db.models.deletion.SET_NULL, to='django_q.ormq')),
            ],
            options={
                'ordering': ['created_at'],
                'abstract': False,
            },
        ),
    ]
