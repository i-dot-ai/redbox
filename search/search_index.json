{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Redbox","text":"<p>Redbox is a retrieval augmented generation (RAG) app that uses GenAI to chat with and summarise civil service documents. It's designed to handle a variety of administrative sources, such as letters, briefings, minutes, and speech transcripts.</p> <ul> <li>Better retrieval. Redbox increases organisational memory by indexing documents</li> <li>Faster, accurate summarisation. Redbox can summarise reports read months ago, supplement them with current work, and produce a first draft that lets civil servants focus on what they do best</li> </ul> <p>Built by the Incubator for AI (i.AI).</p> <p></p> <p>Work in progress</p> <p>This repository is a work in progress and is being actively developed. We are working on releasing features and refining documentation. If you have any questions or suggestions, please feel free to open an issue or a pull request. We welcome contributions from the open source community!</p>"},{"location":"DEVELOPER_SETUP/","title":"Developer Setup Guide","text":""},{"location":"DEVELOPER_SETUP/#requirements","title":"Requirements","text":""},{"location":"DEVELOPER_SETUP/#installing-packages","title":"Installing packages","text":"<p>Currently, we use poetry to manage our python packages. The list of poetry groups and python packages we install can be found here in <code>pyproject.toml</code>.</p> <p>Run the following to install the packages into a virtual environment poetry will create.</p> <pre><code>poetry install\n</code></pre>"},{"location":"DEVELOPER_SETUP/#vscode","title":"VSCode","text":"<p>To make use of the VSCode setup open the workspace file .vscode/redbox.code-workspace. This will open the relevant services as roots in a single workspace. The recommended way to use this is: * Create a venv in each of the main service directories (core-api, redbox-core, worker) this should be in a directory called venv * Configure each workspace directory to use it's own venv python interpreter. NB You may need to enter these manually when prompted as ./venv/bin/python</p> <p>The tests should then all load separately and use their own env.</p>"},{"location":"DEVELOPER_SETUP/#setting-environment-variables","title":"Setting environment variables","text":"<p>We use <code>.env</code> files to populate the environment variables for local development. When cloning the repository the files <code>.env.test</code>, <code>.env.django</code>, <code>.env.integration</code> and <code>.env.example</code> will be populated.</p> <p>To run the project, create a new file called <code>.env</code> and populate this file with the setting names from <code>.env.example</code> and the values these settings need.</p> <p>Typically this involves setting the following variables:</p> <ul> <li><code>OPENAI_API_KEY</code> - OpenAI API key</li> <li><code>ANTHROPIC_API_KEY</code> - Anthropic API key</li> </ul> <p><code>.env</code> is in <code>.gitignore</code> and should not be committed to git</p>"},{"location":"DEVELOPER_SETUP/#backend-profiles","title":"Backend Profiles","text":"<p>Redbox can use different backends for chat and embeddings, which are used is controlled by env vars. The defaults are currently to use Azure for both chat and embeddings but OpenAI can be used (and pointed to an OpenAI compliant local service). The relevant env vars for overriding to use OpenAI embeddings are:</p> <p>EMBEDDING_OPENAI_BASE_URL=http://myembeddings:8080/v1 EMBEDDING_BACKEND=openai</p>"},{"location":"DEVELOPER_SETUP/#other-dependencies-for-document-ingestion-and-ocr","title":"Other dependencies (for Document Ingestion and OCR)","text":"<p>You will need to install <code>poppler</code> and <code>tesseract</code> to run the <code>worker</code> - <code>brew install poppler</code> - <code>brew install tesseract</code></p>"},{"location":"DEVELOPER_SETUP/#building-and-running-the-project","title":"Building and running the project","text":"<p>To view all the build commands, check the <code>Makefile</code> that can be found here.</p> <p>The project currently consists of multiple docker images needed to run the project in its entirety. If you only need a subsection of the project running, for example if you're only editing the django app, you can run a subset of the images. The images currently in the project are:</p> <ul> <li><code>elasticsearch</code></li> <li><code>kibana</code></li> <li><code>worker</code></li> <li><code>minio</code></li> <li><code>redis</code></li> <li><code>core-api</code></li> <li><code>db</code></li> <li><code>django-app</code></li> </ul> <p>To build the images needed to run the project, use this command:</p> <pre><code>make build\n</code></pre> <p>or </p> <pre><code>docker compose build\n</code></pre> <p>Once those images have built, you can run them using:</p> <pre><code>make run\n</code></pre> <p>or </p> <pre><code>docker compose up\n</code></pre> <p>Some parts of the project can be run independently for development, for example the django application, which can be run with:</p> <pre><code>docker compose up django-app\n</code></pre> <p>For any other commands available, check the <code>Makefile</code> here.</p>"},{"location":"DEVELOPER_SETUP/#how-to-run-tests","title":"How to run tests","text":"<p>Tests are split into different commands based on the application the tests are for. For each application there is a separate <code>make</code> command to run those tests, these are:</p> <p>For the django app:</p> <pre><code>make test-django\n</code></pre> <p>For the core API:</p> <pre><code>make test-core-api\n</code></pre> <p>For the worker:</p> <pre><code>make test-worker\n</code></pre> <p>For integration tests:</p> <pre><code>make test-integration\n</code></pre>"},{"location":"DEVELOPER_SETUP/#logging-in-to-redbox-locally","title":"Logging in to Redbox Locally","text":"<p>We'll need to create a superuser to log in to the Django app, to do this run the following steps:</p> <ol> <li>Come up with an email to log in with. It doesn't need to be real.</li> <li><code>docker compose run django-app venv/bin/django-admin createsuperuser</code></li> <li>Use the email you came up with in step 1, and a password (the password isn't used as we use magic links).</li> <li>Now go to http://localhost:8090/sign-in/ enter the email you just created a super user for.</li> <li>Press \"Continue\"</li> <li>Now go to your terminal and run <code>docker compose logs django-app | grep 8090/magic_link</code></li> <li>Click that link and you should be logged in.</li> </ol>"},{"location":"DEVELOPER_SETUP/#pre-commit-hooks","title":"Pre-commit hooks","text":"<ul> <li>Download and install pre-commit to benefit from pre-commit hooks</li> <li><code>pip install pre-commit</code></li> <li><code>pre-commit install</code></li> </ul>"},{"location":"DEVELOPER_SETUP/#llm-evaluation","title":"LLM evaluation","text":"<p>Notebooks with some standard methods to evaluate the LLM can be found in the notebooks/ directory.</p> <p>You may want to evaluate using versioned datasets in conjunction with a snapshot of the pre-embedded vector store.</p> <p>We use elasticsearch-dump to save and load bulk data from the vector store.</p>"},{"location":"DEVELOPER_SETUP/#installing-node-and-elasticsearch-dump","title":"Installing Node and <code>elasticsearch-dump</code>","text":"<p>Install Node and <code>npm</code> (Node package manager) if you don't already have them. We recommend using <code>nvm</code> (Node version manager) to do this. </p> <p>If you're familiar with Node or use it regularly we recommend following your own processes or the tools' documentation. We endeavour to provide a quickstart here which will install <code>nvm</code>, Node, <code>npm</code> and <code>elasticsearch-dump</code> globally. This is generally not good practise.</p> <p>To install <code>nvm</code>:</p> <pre><code>curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash\n</code></pre> <p>Restart your terminal.</p> <p>Install Node.</p> <pre><code>nvm install node\nnvm use --lts\n</code></pre> <p>Verify installation.</p> <pre><code>node --version\n</code></pre> <p>Install <code>elasticsearch-dump</code> globally.</p> <pre><code>npm install elasticdump -g\n</code></pre>"},{"location":"DEVELOPER_SETUP/#dumping-data-from-elasticsearch","title":"Dumping data from Elasticsearch","text":"<p>The default indices we want are:</p> <ul> <li><code>redbox-data-file</code></li> <li><code>redbox-data-chunk</code></li> </ul> <p>Dump these to data/elastic-dumps/ for saving or sharing.</p> <pre><code>elasticdump \\\n  --input=http://localhost:9200/redbox-data-file \\\n  --output=./data/elastic-dumps/redbox-data-file.json \\\n  --type=data\nelasticdump \\\n  --input=http://localhost:9200/redbox-data-chunk \\\n  --output=./data/elastic-dumps/redbox-data-chunk.json \\\n  --type=data\n</code></pre>"},{"location":"DEVELOPER_SETUP/#loading-data-to-elasticsearch","title":"Loading data to Elasticsearch","text":"<p>If you've been provided with a dump from the vector store, add it to data/elastic-dumps/. The below assumes the existance of <code>redbox-data-file.json</code> and <code>redbox-data-chunk.json</code> in that directory.</p> <p>Consider dumping your existing indices if you don't want to have to reembed data you're working on.</p> <p>Start the Elasticsearch service.</p> <pre><code>docker compose up -d elasticsearch\n</code></pre> <p>Load data from your JSONs, or your own file.</p> <pre><code>elasticdump \\\n  --input=./data/elastic-dumps/redbox-data-file.json \\\n  --output=http://localhost:9200/redbox-data-file \\\n  --type=data\nelasticdump \\\n  --input=./data/elastic-dumps/redbox-data-chunk.json \\\n  --output=http://localhost:9200/redbox-data-chunk \\\n  --type=data\n</code></pre> <p>If you're using this index in the frontend, you may want to upload the raw files to MinIO, though that's out of scope for this guide.</p>"},{"location":"chat_chart/","title":"Chat chain diagram","text":"<pre><code>flowchart LR;\n    subgraph input\n        chat_history\n        question\n        vectorstore[(vectorstore)]\n    end\n\n    subgraph prompts\n        _core_redbox_prompt\n        _chat_template\n        _with_sources_template\n        _stuff_document_template\n    end\n\n    subgraph ConversationalRetrievalChain\n        _core_redbox_prompt --&gt; chat_history\n        _chat_template --&gt; conversation\n        conversation{\"\"\"question_generator_chain\n        (LLM)\"\"\"}\n\n        question --&gt; conversation\n        chat_history --&gt; conversation\n        subgraph question generator\n        conversation --&gt; standalone_question\n    end\n\n    _with_sources_template --&gt; with_sources\n    _stuff_document_template --&gt; metadata\n    vectorstore &lt;--&gt; retriever{retriever}\n    retriever --&gt; relevant_docs\n\n    subgraph QA Chain with sources\n        with_sources{\"\"\"combine_docs_chain\n        (LLM)\"\"\"}\n        metadata --&gt; with_sources\n    end\n\n    relevant_docs --&gt; metadata{inject metadata}\n    standalone_question --&gt; retriever\n    standalone_question --&gt; with_sources\n\n\n\n end\nwith_sources ==&gt; answer</code></pre> <p>#  Based on langchain class: <code>ConversationalRetrievalChain(BaseConversationalRetrievalChain)</code>:</p> <p>\"This chain takes in chat history (a list of messages) and new questions, and then returns an answer to that question.    The algorithm for this chain consists of three parts:</p> <ol> <li> <p>Use the chat history and the new question to create a \"standalone question\". This is done so that this question can be passed into the retrieval step to fetch   relevant documents. If only the new question was passed in, then relevant context      may be lacking. If the whole conversation was passed into retrieval, there may    be unnecessary information there that would distract from retrieval.</p> </li> <li> <p>This new question is passed to the retriever and relevant documents are  returned.</p> </li> <li> <p>The retrieved documents are passed to an LLM along with either the new question    (default behavior) or the original question and chat history to generate a final    response.\"</p> </li> </ol>"},{"location":"contributing/","title":"Contributing to Redbox","text":"<p>First off, thanks for taking the time to contribute! \u2764\ufe0f</p> <p>All types of contributions are encouraged and valued. See the Table of Contents for different ways to help and details about how this project handles them. Please make sure to read the relevant section before making your contribution. It will make it a lot easier for us maintainers and smooth out the experience for all involved. The community looks forward to your contributions. \ud83c\udf89</p> <p>And if you like the project, but just don't have time to contribute, that's fine. There are other easy ways to support the project and show your appreciation, which we would also be very happy about: - Star the project - Tweet about it - Refer this project in your project's readme - Mention the project at local meetups and tell your friends/colleagues</p>"},{"location":"contributing/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Contributing to Redbox</li> <li>Code of Conduct</li> <li>I Have a Question</li> <li>I Want To Contribute<ul> <li>Reporting Bugs</li> <li>Before Submitting a Bug Report</li> <li>Suggesting Enhancements</li> <li>Before Submitting an Enhancement</li> </ul> </li> <li>Styleguides<ul> <li>Commit Messages</li> </ul> </li> <li>Attribution</li> </ul>"},{"location":"contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>This project and everyone participating in it is governed by the Redbox Code of Conduct. By participating, you are expected to uphold this code. Please report unacceptable behavior to i-dot-ai-enquiries@cabinetoffice.gov.uk</p>"},{"location":"contributing/#i-have-a-question","title":"I Have a Question","text":"<p>If you want to ask a question, we assume that you have read the available Documentation.</p> <p>Before you ask a question, it is best to search for existing Issues that might help you. In case you have found a suitable issue and still need clarification, you can write your question in this issue. It is also advisable to search the internet for answers first.</p> <p>If you then still feel the need to ask a question and need clarification, we recommend the following:</p> <ul> <li>Open an Issue.</li> <li>Provide as much context as you can about what you're running into.</li> <li>Provide project and platform versions (nodejs, npm, etc), depending on what seems relevant.</li> </ul> <p>We will then take care of the issue as soon as possible.</p>"},{"location":"contributing/#i-want-to-contribute","title":"I Want To Contribute","text":""},{"location":"contributing/#legal-notice","title":"Legal Notice","text":"<p>When contributing to this project, you must agree that you have authored 100% of the content, that you have the necessary rights to the content and that the content you contribute may be provided under the project license.</p>"},{"location":"contributing/#reporting-bugs","title":"Reporting Bugs","text":""},{"location":"contributing/#before-submitting-a-bug-report","title":"Before Submitting a Bug Report","text":"<p>A good bug report shouldn't leave others needing to chase you up for more information. Therefore, we ask you to investigate carefully, collect information and describe the issue in detail in your report. Please complete the following steps in advance to help us fix any potential bug as fast as possible.</p> <ul> <li>Make sure that you are using the latest version.</li> <li>Determine if your bug is really a bug and not an error on your side e.g. using incompatible environment components/versions (Make sure that you have read the documentation. If you are looking for support, you might want to check this section).</li> <li>To see if other users have experienced (and potentially already solved) the same issue you are having, check if there is not already a bug report existing for your bug or error in the bug tracker.</li> <li>Also make sure to search the internet (including Stack Overflow) to see if users outside of the GitHub community have discussed the issue.</li> <li>Collect information about the bug:</li> <li>Stack trace (Traceback)</li> <li>OS, Platform and Version (Windows, Linux, macOS, x86, ARM)</li> <li>Version of the interpreter, compiler, SDK, runtime environment, package manager, depending on what seems relevant.</li> <li>Possibly your input and the output</li> <li>Can you reliably reproduce the issue? And can you also reproduce it with older versions?</li> </ul>"},{"location":"contributing/#how-do-i-submit-a-good-bug-report","title":"How Do I Submit a Good Bug Report?","text":"<p>You must never report security related issues, vulnerabilities or bugs including sensitive information to the issue tracker, or elsewhere in public. Instead sensitive bugs must be sent by email to &lt;&gt;.</p> <p>We use GitHub issues to track bugs and errors. If you run into an issue with the project:</p> <ul> <li>Open an Issue. (Since we can't be sure at this point whether it is a bug or not, we ask you not to talk about a bug yet and not to label the issue.)</li> <li>Explain the behavior you would expect and the actual behavior.</li> <li>Please provide as much context as possible and describe the reproduction steps that someone else can follow to recreate the issue on their own. This usually includes your code. For good bug reports you should isolate the problem and create a reduced test case.</li> <li>Provide the information you collected in the previous section.</li> </ul> <p>Once it's filed:</p> <ul> <li>The project team will label the issue accordingly.</li> <li>A team member will try to reproduce the issue with your provided steps. If there are no reproduction steps or no obvious way to reproduce the issue, the team will ask you for those steps and mark the issue as <code>needs-repro</code>. Bugs with the <code>needs-repro</code> tag will not be addressed until they are reproduced.</li> <li>If the team is able to reproduce the issue, it will be marked <code>needs-fix</code>, as well as possibly other tags (such as <code>critical</code>), and the issue will be left to be implemented by someone.</li> </ul>"},{"location":"contributing/#suggesting-enhancements","title":"Suggesting Enhancements","text":"<p>This section guides you through submitting an enhancement suggestion for Redbox, including completely new features and minor improvements to existing functionality. Following these guidelines will help maintainers and the community to understand your suggestion and find related suggestions.</p>"},{"location":"contributing/#before-submitting-an-enhancement","title":"Before Submitting an Enhancement","text":"<ul> <li>Make sure that you are using the latest version.</li> <li>Read the documentation carefully and find out if the functionality is already covered, maybe by an individual configuration.</li> <li>Perform a search to see if the enhancement has already been suggested. If it has, add a comment to the existing issue instead of opening a new one.</li> <li>Find out whether your idea fits with the scope and aims of the project. It's up to you to make a strong case to convince the project's developers of the merits of this feature. Keep in mind that we want features that will be useful to the majority of our users and not just a small subset. If you're just targeting a minority of users, consider writing an add-on/plugin library.</li> </ul>"},{"location":"contributing/#how-do-i-submit-a-good-enhancement-suggestion","title":"How Do I Submit a Good Enhancement Suggestion?","text":"<p>Enhancement suggestions are tracked as GitHub issues.</p> <ul> <li>Use a clear and descriptive title for the issue to identify the suggestion.</li> <li>Provide a step-by-step description of the suggested enhancement in as many details as possible.</li> <li>Describe the current behavior and explain which behavior you expected to see instead and why. At this point you can also tell which alternatives do not work for you.</li> <li>You may want to include screenshots and animated GIFs which help you demonstrate the steps or point out the part which the suggestion is related to. You can use this tool to record GIFs on macOS and Windows, and this tool or this tool on Linux. </li> <li>Explain why this enhancement would be useful to most Redbox users. You may also want to point out the other projects that solved it better and which could serve as inspiration.</li> </ul>"},{"location":"contributing/#styleguides","title":"Styleguides","text":""},{"location":"contributing/#commit-messages","title":"Commit Messages","text":"<ul> <li>Keep the subject line short, clear and descriptive.</li> <li>Use the present tense (\"Add feature\" not \"Added feature\").</li> <li>Use the imperative mood (\"Move cursor to...\" not \"Moves cursor to...\").</li> <li>Limit the subject line to 50 characters.</li> </ul>"},{"location":"contributing/#attribution","title":"Attribution","text":"<p>This guide is based on the contributing-gen. Make your own!</p>"},{"location":"architecture/","title":"Architecture","text":"<p>Redbox is intended to be as modular and multi-use as possible. Our initial design is build for AWS simply due to the cloud available to us. However, we are designing the system to be able to be used on any cloud provider or on-premises.</p> <p>Some of our guiding architectural principles are:</p> <ul> <li>Modularity: We want to be able to swap out components easily. This means that we want to be able to swap out the database, the document processing pipeline, the large language model, etc.</li> <li>Scalability: We want to be able to scale the system horizontally. This means that we want to be able to add more instances of the system to handle more load.</li> <li>Resilience: We want the system to be able to recover from failures. This means that we want to be able to recover from a failure of a single instance of the system.</li> <li>Security: We want the system to be secure. This means that we want to be able to secure the system from unauthorized access.</li> <li>Simplicity: In taking a simple approach to data ownership we want to enable other deployers to introduce their own business logic separately from the core system.</li> </ul>"},{"location":"architecture/#document-processing-pipeline","title":"Document Processing Pipeline","text":"<p>The document processing pipeline is the core of the Redbox system. It is responsible for processing documents and extracting information from them. The pipeline is broken down into two main components: Worker and Core API.</p> <p></p>"},{"location":"architecture/#rag-architecture","title":"RAG Architecture","text":"<p>The Retrieval Augmented Generation (RAG) architecture grounds our Large Language Model in the context of uploaded documents. </p> <p></p>"},{"location":"architecture/#notional-cross-cloud-components","title":"Notional Cross-Cloud Components","text":"Component AWS Azure Local Purpose/Function Object Store S3 Blob Storage Minio Storage of files Queue ElastiCache Storage Queues Redis Distributing many compute tasks Frontend App ECS App Service Docker Django GOV.UK/AlpineJS Core API ECS App Service Docker FastAPI AI Interaction and DB Intermediary Worker ECS App Service Docker Queue fed file ingester and embedder Database RDS/Postgres Postgres Postgres Chat history &amp; user data Vector Database ElasticCloud ElasticCloud Elasticsearch RAG Database Container Registry ECR ACR Harbor Storage for app containers Embedding API Azure OpenAI Service Azure OpenAI Service Huggingface Containers Embedding for docs into VectorDB LLM API Azure OpenAI Service Azure OpenAI Service Huggingface Containers Chat model"},{"location":"architecture/docker_and_dependencies/","title":"Docker and Dependencies","text":"<p>Each of the Microservices in the Redbox system is built into a Docker container. This allows us to run the Microservices in a consistent environment across different platforms. It also allows us to easily scale the number of instances of a Microservice up or down depending on the load.</p>"},{"location":"architecture/docker_and_dependencies/#poetry-groups","title":"Poetry Groups","text":"<p>We use Poetry to manage the dependencies for each of the Microservices. Poetry is a Python dependency management tool that allows us to specify the dependencies for a Microservice in a <code>pyproject.toml</code> file. </p> <p>For example, the <code>core-api</code> Microservice has the following groups:</p> <pre><code>cd core-api\npoetry install --without dev\n</code></pre> <p>Be explicit with poetry groups</p> <p>Note that you have to explicitly state which groups you want to install and which to exclude. This is because Poetry will install all groups by default.</p>"},{"location":"architecture/docker_and_dependencies/#buildkit","title":"Buildkit","text":"<p>We are using Buildkit to build our Docker containers. Buildkit is a new build system that is part of Docker. It is faster and more efficient than the old build system. It also has some new features that make it easier to build Docker containers. </p> <p>We use multi-stage builds to keep the size of our Docker containers small. This means that we have a separate <code>builder</code> stage and a separate <code>runner</code> stage. The <code>builder</code> stage is used to install depenencies to a virtualenv using poetry and then we copy that virtualenv to the <code>runner</code> stage. This keeps the size of the <code>runner</code> stage small.</p>"},{"location":"architecture/docker_and_dependencies/#example-dockerfile","title":"Example Dockerfile","text":"<pre><code># BUILDER\nFROM python:3.12-bookworm as builder\n\nWORKDIR /app/\n\nRUN pip install poetry\nENV POETRY_NO_INTERACTION=1 \\\n    POETRY_VIRTUALENVS_IN_PROJECT=1 \\\n    POETRY_VIRTUALENVS_CREATE=1 \\\n    POETRY_CACHE_DIR=/tmp/poetry_cache\n\nCOPY pyproject.toml poetry.lock /app/\nRUN --mount=type=cache,target=$POETRY_CACHE_DIR poetry install\n\n# RUNNER\n\nFROM python:3.12-slim-buster as runtime\n\nENV VIRTUAL_ENV=/app/.venv \\\n    PATH=\"/app/.venv/bin:$PATH\"\nCOPY --from=builder ${VIRTUAL_ENV} ${VIRTUAL_ENV}\n\nCMD [\"python\", \"-V\"]\n</code></pre>"},{"location":"architecture/transactions_and_schema/","title":"Transactions and Schema","text":""},{"location":"architecture/transactions_and_schema/#transaction-sequences","title":"Transaction Sequences","text":"<p>Below are the transaction sequences for the APIs. The transaction sequences are generated using the mermaid library. </p>"},{"location":"architecture/transactions_and_schema/#file-apis","title":"File APIs","text":"<p>See below for some of the main <code>File</code> routes.</p>"},{"location":"architecture/transactions_and_schema/#post-file","title":"<code>POST /file</code>","text":"<pre><code>---\ntitle: Transaction sequence - POST /file\n---\n\nsequenceDiagram\n    Django-&gt;&gt;S3: file key, content\n    Django-&gt;&gt;Core: file key\n    Core-&gt;&gt;Workers: file key\n    Core-&gt;&gt;Elastic: file key\n    S3-&gt;&gt;Workers: file content\n    Workers-&gt;&gt;Elastic: chunk key, content</code></pre>"},{"location":"architecture/transactions_and_schema/#chat-apis","title":"Chat APIs","text":""},{"location":"architecture/transactions_and_schema/#post-chatvanilla","title":"<code>POST /chat/vanilla</code>","text":"<pre><code>---\ntitle: Transaction sequence - POST /chat/vanilla\n---\n\nsequenceDiagram\n    Django-&gt;&gt;Core: ChatHistory.messages[]\n    Core-&gt;&gt;LLM API: ChatHistory.messages[]\n</code></pre>"},{"location":"architecture/transactions_and_schema/#post-chatrag","title":"<code>POST /chat/rag</code>","text":"<pre><code>---\ntitle: Transaction sequence - POST /chat/rag\n---\n\nsequenceDiagram\n    Django-&gt;&gt; Core: ChatHistory.messages[], File[].uuid\n    Elastic-&gt;&gt;Core: File[].Chunk[].embeddings\n    Core-&gt;&gt;LLM API: ChatHistory.messages[].embeddings, File[].Chunk[].embeddings\n</code></pre>"},{"location":"architecture/transactions_and_schema/#schema","title":"Schema","text":""},{"location":"architecture/transactions_and_schema/#django-schema","title":"Django Schema","text":"<p>The Django schema is a simple schema that stores the users, user groups, chat messages, chat histories, and file records. We keep all the business logic isolated here to keep the Core API simple. For any organisations with more complex business logic, this is where you would add it in your own version.</p> <pre><code>---\ntitle: Django schema\n---\n\nerDiagram\n    User }|--|{ \"UserGroup(django.models.Group)\" : \"UserGroup.users\"\n    User {\n        UUID uuid\n        string name\n    }\n    \"UserGroup(django.models.Group)\" {\n        UUID uuid\n        string name\n        UUID[] users\n    }\n\n    FileRecord }|--|| \"UserGroup(django.models.Group)\": \"FileRecord.owner\"\n    FileRecord {\n        UUID uuid\n        UUID owner\n        string key \n    }\n\n    ChatMessage {\n        UUID uuid\n        UUID chat_history\n        string text\n        string role \n    }\n\n    ChatMessage }|--|| ChatHistory: \"ChatMessage.chat_history\"\n    \"UserGroup(django.models.Group)\" ||--|{ ChatHistory: \"ChatHistory.owner\"\n\n    ChatHistory {\n        UUID uuid\n        string name\n        UUID owner\n        UUID[] files_received\n        UUID[] files_retrieved\n    }\n\n    ChatHistory }|--o{ FileRecord: \"ChatHistory.files_received\"\n    ChatHistory }|--o{ FileRecord: \"ChatHistory.files_retrieved\"</code></pre>"},{"location":"architecture/transactions_and_schema/#elastic-schema","title":"Elastic Schema","text":"<p>Keeping things simple is the primary ethos here. We are storing the UUID of the parent file in the chunk. This allows us to easily query for all chunks of a file. We are also storing the text of the chunk, the metadata of the chunk, and the embedding of the chunk. The embedding is a float array that is generated by the embedding API.</p> <pre><code>---\ntitle: Elastic schema\n---\n\nerDiagram\n    File ||--o{ Chunk : \"File.uuid\"\n    File {\n        UUID uuid\n    }\n    Chunk {\n        UUID uuid\n        UUID parent_file_uuid\n        int index\n        str text\n        dict metadata\n        float[] embedding\n    }</code></pre>"},{"location":"architecture/workers_and_queues/","title":"Workers and Queues","text":"<p>The Worker is a set of service that runs in the background and perform tasks that are too resource-intensive to run on the Core API. This worker includes:</p> <ul> <li>Ingesting files</li> <li>Embedding chunks of text</li> </ul> <p>The Workers are designed to be horizontally scalable. This means that we can add more instances of the Workers to handle more load. The Workers are also designed to be resilient. This means that if one instance of the Worker fails, another instance can take over.</p> <p></p>"},{"location":"architecture/workers_and_queues/#scaling","title":"Scaling","text":"<p>When running locally in docker compose, there is only one replica of each Worker. When running in the cloud, we can scale the number of replicas up or down depending on the load. For AWS this will be based on the number of messages in the SQS Queue. For local development, we can scale the number of replicas up or down manually by adding the <code>replicas</code> key to the <code>docker-compose.yml</code> file for each service.</p>"},{"location":"architecture/workers_and_queues/#faststream","title":"FastStream","text":"<p>We are using FastStream to handle our streaming between Microservices. It handles the connection to Redis (and other Queues) with a high-performance Python client based on FastAPI and Pydantic. It has support for multiple brokers, automatic documentation, and tests. </p>"},{"location":"architecture/workers_and_queues/#worker","title":"Worker","text":"<p>The Worker is responsible for: * ingesting files into the system. The Ingester Worker reads a <code>File</code> reference from its queue and then reads the file from the Object Store. The Worker then processes the file and stores the file in the Database. The worker also sends created <code>Chunk</code> references to the Worker via the <code>embedding-queue</code>. * embedding chunks of text. The Embedder Worker reads a <code>Chunk</code> reference from its queue and then reads the text from the Database. The Worker then embeds the text with it instance of the embedding model. The worker then stores the embedding in the Database.</p>"},{"location":"architecture/adr/rag_evaluation/","title":"Architecture Decision Record (ADR) template","text":"<p>This is a template for EdgeX Foundry ADR.</p> <p>Source: https://docs.edgexfoundry.org/2.3/design/adr/template/</p>"},{"location":"architecture/adr/rag_evaluation/#submitters","title":"Submitters","text":"<p>List ADR submitters.</p> <p>Format:</p> <ul> <li>Andy Symonds</li> </ul>"},{"location":"architecture/adr/rag_evaluation/#change-log","title":"Change Log","text":"<p>List the changes to the document, incl. state, date, and PR URL.</p> <p>State is one of: pending, approved, amended, deprecated.</p> <p>Date is an ISO 8601 (YYYY-MM-DD) string.</p> <p>PR is the pull request that submitted the change, including information such as the diff, contributors, and reviewers.</p> <p>Format:</p> <ul> <li>[ADR in review](https://github.com/i-dot-ai/redbox-copilot/pull/330) 2024-05-13</li> </ul>"},{"location":"architecture/adr/rag_evaluation/#referenced-use-cases","title":"Referenced Use Case(s)","text":"<p>List all relevant use case / requirements documents.</p> <p>ADR requires at least one relevant, approved use case.</p> <p>Format:</p> <ul> <li>[Evaluation of Redbox chat]\\</li> </ul>"},{"location":"architecture/adr/rag_evaluation/#context","title":"Context","text":"<p>Describe:</p> <ul> <li> <p>We need robust LLM evaluation in place, to give ourselves and users confidence that redbox is working as it should and to avoid undesirable side effects of using LLMs, such as hallucinations that would reduce trust in the tools we are building.</p> </li> <li> <p>We conducted a spike on using the DeepEval framework for RAG evaluation and testing</p> </li> </ul>"},{"location":"architecture/adr/rag_evaluation/#proposed-design","title":"Proposed Design","text":"<p>Details of the design (without getting into implementation where possible).</p> <p>Outline of spike:</p> <ul> <li> <p>Collect / generate a basic dataset for evaluation (focus on MVP functionality: chat)</p> </li> <li> <p>Notebook developed to test /rag endpoint with DeepEval</p> </li> <li> <p>Explore and have some ideas/skeleton code for how DeepEval can fit into existing CI-CD pipeline with an eye on integration tests for LLM</p> </li> <li> <p>Document main findings in this ADR document</p> </li> </ul>"},{"location":"architecture/adr/rag_evaluation/#considerations","title":"Considerations","text":""},{"location":"architecture/adr/rag_evaluation/#pros-to-using-deepeval","title":"Pros to using DeepEval","text":"<ul> <li> <p>By following the more traditional testing and metrics driven techniques, we can nicely separately functional, performance, and responsibility testing in different test files</p> </li> <li> <p>Offers a thorough evaluation framework for RAG endpoints, but also summarisation and other future functions</p> </li> <li> <p>Easily integrates into our CI/CD pipeline</p> </li> <li> <p>Bridges unit testing and evaluation for Redbox</p> </li> </ul>"},{"location":"architecture/adr/rag_evaluation/#cons-to-using-deepeval","title":"Cons to using DeepEval","text":"<ul> <li> <p><code>DeepEval</code> synthesizer for generating synthetic data, does not yet create \u2018expected_output\u2019 (currently null). The ability to also generate \u2018expected_outcome\u2019 will be in next release according to the Discord channel. Given context, DeepEval synthesizer will generate input questions. In the meantime, we can simply generate the expected_outcome using LLM and prompting</p> </li> <li> <p>If included in all CI/CD, frontend dev work that is not touching backend will still be running these tests and incuring an LLM cost (albeit small). Perhaps just make some tests to run only when backend directories are changed</p> </li> <li> <p>You need to login to Confident AI / use API key to view different evaluations against each other. Not an issue for CI/CD, however, without logging in/paying you cannot really use these evaluations for experimentation and improving your RAG pipeline; if we go another way are we reinventing the wheel? But it would be open source. If we do go another way, e.g. MLFlow + RAGAS metrics, is it still worth using DeepEval for CI/CD over just pytest?</p> </li> <li> <p>Monitoring in production and real-time evaluation is only evailable when logging into Confident AI using API / pricing involved</p> </li> <li> <p>Still need to check if any data is transmitted to confident AI when you do NO login or if you login once, but no longer want to use Confident AI hosted platform</p> </li> </ul>"},{"location":"architecture/adr/rag_evaluation/#decision","title":"Decision","text":"<ul> <li> <p>Using <code>DeepEval</code> hosted platform on Confident AI is not a dealbreaker at the moment, so we can continue with using <code>DeepEval</code> for evaluating Redbox chat</p> </li> <li> <p>We will still look into if we can combine MLFlow + DeepEval in a separate spike.</p> </li> </ul>"},{"location":"architecture/adr/rag_evaluation/#other-related-adrs","title":"Other Related ADRs","text":""},{"location":"architecture/adr/rag_evaluation/#references","title":"References","text":"<p>Link to Redbox RAG evaluation notebook for this spike</p>"},{"location":"architecture/adr/template_edgex/","title":"Architecture Decision Record (ADR) template","text":"<p>This is a template for EdgeX Foundry ADR.</p> <p>Source: https://docs.edgexfoundry.org/2.3/design/adr/template/</p>"},{"location":"architecture/adr/template_edgex/#submitters","title":"Submitters","text":"<p>List ADR submitters.</p> <p>Format:</p> <ul> <li>Name (Organization)</li> </ul>"},{"location":"architecture/adr/template_edgex/#change-log","title":"Change Log","text":"<p>List the changes to the document, incl. state, date, and PR URL.</p> <p>State is one of: pending, approved, amended, deprecated.</p> <p>Date is an ISO 8601 (YYYY-MM-DD) string.</p> <p>PR is the pull request that submitted the change, including information such as the diff, contributors, and reviewers.</p> <p>Format:</p> <ul> <li>[Status of ADR e.g. approved, amended, etc.](URL of pull request) YYYY-MM-DD</li> </ul>"},{"location":"architecture/adr/template_edgex/#referenced-use-cases","title":"Referenced Use Case(s)","text":"<p>List all relevant use case / requirements documents.</p> <p>ADR requires at least one relevant, approved use case.</p> <p>Format:</p> <ul> <li>[Use Case Name](URL)</li> </ul> <p>Add explanations if the ADR is not addressing all the requirements of a use case.</p>"},{"location":"architecture/adr/template_edgex/#context","title":"Context","text":"<p>Describe:</p> <ul> <li> <p>how the design is architecturally significant - warranting an ADR (versus simple issue and PR to fix a problem)</p> </li> <li> <p>the high level design approach (details described in the proposed design below)</p> </li> </ul>"},{"location":"architecture/adr/template_edgex/#proposed-design","title":"Proposed Design","text":"<p>Details of the design (without getting into implementation where possible).</p> <p>Outline:</p> <ul> <li> <p>services/modules to be impacted (changed)</p> </li> <li> <p>new services/modules to be added</p> </li> <li> <p>model and DTO impact (changes/additions/removals)</p> </li> <li> <p>API impact (changes/additions/removals)</p> </li> <li> <p>general configuration impact (establishment of new sections, changes/additions/removals)</p> </li> <li> <p>devops impact</p> </li> </ul>"},{"location":"architecture/adr/template_edgex/#considerations","title":"Considerations","text":"<p>Document alternatives, concerns, ancillary or related issues, questions that arose in debate of the ADR. </p> <p>Indicate if/how they were resolved or mollified.</p>"},{"location":"architecture/adr/template_edgex/#decision","title":"Decision","text":"<p>Document any agreed upon important implementation detail, caveats, future considerations, remaining or deferred design issues.</p> <p>Document any part of the requirements not satisfied by the proposed design.</p>"},{"location":"architecture/adr/template_edgex/#other-related-adrs","title":"Other Related ADRs","text":"<p>List any relevant ADRs - such as a design decision for a sub-component of a feature, a design deprecated as a result of this design, etc.. </p> <p>Format:</p> <ul> <li>[ADR Title](URL) - Relevance</li> </ul>"},{"location":"architecture/adr/template_edgex/#references","title":"References","text":"<p>List additional references.</p> <p>Format:</p> <ul> <li>[Title](URL)</li> </ul>"},{"location":"code_reference/","title":"Code Reference","text":"<p>Across all of the Redbox archiecture, a common library of classes and functions are used to handle the data and models. This section provides a reference to the classes and functions used in the Redbox codebase.</p>"},{"location":"code_reference/#redbox","title":"redbox","text":"<p>Redbox is a Python library for working with the Redbox API, data and services.</p>"},{"location":"code_reference/models/","title":"Models","text":"<p>Throughout Redbox Pydantic models are used to define the structure of the data that is being passed around. This is done to ensure that the data is in the correct format and to provide a level of type safety when passing between Microservices, Database and the API.</p> <p>In combination with FastAPI, Pydantic models are used to define the structure of the request and response bodies for the API endpoints. It also generates the OpenAPI documentation for the API.</p> <p>To save all all these models we created a <code>PersistableModel</code> class that all models that are saved to the database inherit from. This class adds the following fields to all models:</p>"},{"location":"code_reference/models/#redbox.models.base.PersistableModel","title":"redbox.models.base.PersistableModel","text":"<p>               Bases: <code>BaseModel</code></p> <p>Base class for all models that can be persisted to the database.</p>"},{"location":"code_reference/models/#redbox.models.base.PersistableModel.uuid","title":"uuid  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>uuid = Field(default_factory=uuid4)\n</code></pre>"},{"location":"code_reference/models/#redbox.models.base.PersistableModel.created_datetime","title":"created_datetime  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_datetime = Field(default_factory=utcnow)\n</code></pre>"},{"location":"code_reference/models/#redbox.models.base.PersistableModel.creator_user_uuid","title":"creator_user_uuid  <code>instance-attribute</code>","text":"<pre><code>creator_user_uuid\n</code></pre>"},{"location":"code_reference/models/#redbox.models.base.PersistableModel.model_type","title":"model_type  <code>property</code>","text":"<pre><code>model_type\n</code></pre> <p>Return the name of the model class.</p> RETURNS DESCRIPTION <code>str</code> <p>The name of the model class.</p> <p> TYPE: <code>str</code> </p>"},{"location":"code_reference/models/chunk/","title":"<code>Chunk</code>","text":"<p>The <code>Chunk</code> model is closely related to the <code>File</code> model. It is used to store the actual data of a file in chunks. This is done to allow the Large Language Models to process the data in smaller sections.</p> <p>The <code>embedding</code> field is used to store the text embedding of the chunk, which is crucial to the vector search functionality.</p> <p>Each chunk references the <code>File</code> it belongs to using the <code>parent_file_uuid</code> field.</p>"},{"location":"code_reference/models/chunk/#redbox.models.file.Chunk","title":"redbox.models.file.Chunk","text":"<p>               Bases: <code>PersistableModel</code></p> <p>Chunk of a File</p>"},{"location":"code_reference/models/chunk/#redbox.models.file.Chunk.uuid","title":"uuid  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>uuid = Field(default_factory=uuid4)\n</code></pre>"},{"location":"code_reference/models/chunk/#redbox.models.file.Chunk.created_datetime","title":"created_datetime  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_datetime = Field(default_factory=utcnow)\n</code></pre>"},{"location":"code_reference/models/chunk/#redbox.models.file.Chunk.creator_user_uuid","title":"creator_user_uuid  <code>instance-attribute</code>","text":"<pre><code>creator_user_uuid\n</code></pre>"},{"location":"code_reference/models/chunk/#redbox.models.file.Chunk.model_type","title":"model_type  <code>property</code>","text":"<pre><code>model_type\n</code></pre> <p>Return the name of the model class.</p> RETURNS DESCRIPTION <code>str</code> <p>The name of the model class.</p> <p> TYPE: <code>str</code> </p>"},{"location":"code_reference/models/chunk/#redbox.models.file.Chunk.parent_file_uuid","title":"parent_file_uuid  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>parent_file_uuid = Field(description='id of the original file which this text came from')\n</code></pre>"},{"location":"code_reference/models/chunk/#redbox.models.file.Chunk.index","title":"index  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>index = Field(description='relative position of this chunk in the original file')\n</code></pre>"},{"location":"code_reference/models/chunk/#redbox.models.file.Chunk.text","title":"text  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>text = Field(description='chunk of the original text')\n</code></pre>"},{"location":"code_reference/models/chunk/#redbox.models.file.Chunk.metadata","title":"metadata  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>metadata = Field(description='subset of the unstructured Element.Metadata object', default=None)\n</code></pre>"},{"location":"code_reference/models/chunk/#redbox.models.file.Chunk.embedding","title":"embedding  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>embedding = Field(description='the vector representation of the text', default=None)\n</code></pre>"},{"location":"code_reference/models/chunk/#redbox.models.file.Chunk.text_hash","title":"text_hash  <code>property</code>","text":"<pre><code>text_hash\n</code></pre>"},{"location":"code_reference/models/chunk/#redbox.models.file.Chunk.token_count","title":"token_count  <code>property</code>","text":"<pre><code>token_count\n</code></pre>"},{"location":"code_reference/models/chunk/#chunkstatus","title":"<code>ChunkStatus</code>","text":"<p>The <code>Chunk</code> model also has a companion <code>ChunkStatus</code> model that helps track the status of the chunk processing. This includes information about the embedding process.</p>"},{"location":"code_reference/models/chunk/#redbox.models.file.ChunkStatus","title":"redbox.models.file.ChunkStatus","text":"<p>               Bases: <code>BaseModel</code></p> <p>Status of a chunk of a file.</p>"},{"location":"code_reference/models/chunk/#redbox.models.file.ChunkStatus.chunk_uuid","title":"chunk_uuid  <code>instance-attribute</code>","text":"<pre><code>chunk_uuid\n</code></pre>"},{"location":"code_reference/models/chunk/#redbox.models.file.ChunkStatus.embedded","title":"embedded  <code>instance-attribute</code>","text":"<pre><code>embedded\n</code></pre>"},{"location":"code_reference/models/embedding/","title":"<code>Embedding</code>","text":"<p>An embedding is a numerical representation of a text. It is a crucial part of the vector search functionality in Redbox. The <code>Embedding</code> model is used to store the text embedding of a chunk.</p>"},{"location":"code_reference/models/embedding/#redbox.models.embedding.Embedding","title":"redbox.models.embedding.Embedding","text":"<p>               Bases: <code>BaseModel</code></p> <p>Embedding of a piece of text</p>"},{"location":"code_reference/models/embedding/#redbox.models.embedding.Embedding.object","title":"object  <code>instance-attribute</code>","text":"<pre><code>object\n</code></pre>"},{"location":"code_reference/models/embedding/#redbox.models.embedding.Embedding.index","title":"index  <code>instance-attribute</code>","text":"<pre><code>index\n</code></pre>"},{"location":"code_reference/models/embedding/#redbox.models.embedding.Embedding.embedding","title":"embedding  <code>instance-attribute</code>","text":"<pre><code>embedding\n</code></pre>"},{"location":"code_reference/models/embedding/#redbox.models.embedding.EmbeddingResponse","title":"redbox.models.embedding.EmbeddingResponse","text":"<p>               Bases: <code>BaseModel</code></p> <p>Response from the embedding service in OpenAI format</p>"},{"location":"code_reference/models/embedding/#redbox.models.embedding.EmbeddingResponse.object","title":"object  <code>instance-attribute</code>","text":"<pre><code>object\n</code></pre>"},{"location":"code_reference/models/embedding/#redbox.models.embedding.EmbeddingResponse.data","title":"data  <code>instance-attribute</code>","text":"<pre><code>data\n</code></pre>"},{"location":"code_reference/models/embedding/#redbox.models.embedding.EmbeddingResponse.embedding_id","title":"embedding_id  <code>instance-attribute</code>","text":"<pre><code>embedding_id\n</code></pre>"},{"location":"code_reference/models/embedding/#redbox.models.embedding.EmbeddingResponse.embedding_model","title":"embedding_model  <code>instance-attribute</code>","text":"<pre><code>embedding_model\n</code></pre>"},{"location":"code_reference/models/embedding/#redbox.models.embedding.EmbeddingResponse.embedding_model_info","title":"embedding_model_info  <code>instance-attribute</code>","text":"<pre><code>embedding_model_info\n</code></pre>"},{"location":"code_reference/models/embedding/#redbox.models.embedding.EmbeddingRequest","title":"redbox.models.embedding.EmbeddingRequest","text":"<p>               Bases: <code>BaseModel</code></p> <p>Request to the embedding service.</p>"},{"location":"code_reference/models/embedding/#redbox.models.embedding.EmbeddingRequest.sentences","title":"sentences  <code>instance-attribute</code>","text":"<pre><code>sentences\n</code></pre>"},{"location":"code_reference/models/embedding/#redbox.models.embedding.EmbedQueueItem","title":"redbox.models.embedding.EmbedQueueItem","text":"<p>               Bases: <code>BaseModel</code></p> <p>Instruction to Ingest app for what to embed</p>"},{"location":"code_reference/models/embedding/#redbox.models.embedding.EmbedQueueItem.chunk_uuid","title":"chunk_uuid  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>chunk_uuid = Field(description='id of the chunk that this text belongs to')\n</code></pre>"},{"location":"code_reference/models/file/","title":"<code>File</code>","text":"<p>The <code>File</code> model is the fundamental model for storing file references in the Redbox system. It maintains a lightweight reference to files location in S3.</p>"},{"location":"code_reference/models/file/#redbox.models.file.File","title":"redbox.models.file.File","text":"<p>               Bases: <code>PersistableModel</code></p> <p>Reference to file stored on s3</p>"},{"location":"code_reference/models/file/#redbox.models.file.File.uuid","title":"uuid  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>uuid = Field(default_factory=uuid4)\n</code></pre>"},{"location":"code_reference/models/file/#redbox.models.file.File.created_datetime","title":"created_datetime  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_datetime = Field(default_factory=utcnow)\n</code></pre>"},{"location":"code_reference/models/file/#redbox.models.file.File.creator_user_uuid","title":"creator_user_uuid  <code>instance-attribute</code>","text":"<pre><code>creator_user_uuid\n</code></pre>"},{"location":"code_reference/models/file/#redbox.models.file.File.model_type","title":"model_type  <code>property</code>","text":"<pre><code>model_type\n</code></pre> <p>Return the name of the model class.</p> RETURNS DESCRIPTION <code>str</code> <p>The name of the model class.</p> <p> TYPE: <code>str</code> </p>"},{"location":"code_reference/models/file/#redbox.models.file.File.key","title":"key  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>key = Field(description='file key')\n</code></pre>"},{"location":"code_reference/models/file/#redbox.models.file.File.bucket","title":"bucket  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>bucket = Field(description='s3 bucket')\n</code></pre>"},{"location":"code_reference/models/file/#redbox.models.file.File.ingest_status","title":"ingest_status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ingest_status = Field(description='Status of file ingest for files loaded by new worker', default=None)\n</code></pre>"},{"location":"code_reference/models/file/#filestatus","title":"<code>FileStatus</code>","text":"<p>The <code>File</code> model also has a companion <code>FileStatus</code> model that helps track the status of the file processing. This nests <code>ChunkStatus</code> models to see if chunks have been created and if they have been completely embedded yet.</p>"},{"location":"code_reference/models/file/#redbox.models.file.FileStatus","title":"redbox.models.file.FileStatus","text":"<p>               Bases: <code>BaseModel</code></p> <p>Status of a file.</p>"},{"location":"code_reference/models/file/#redbox.models.file.FileStatus.file_uuid","title":"file_uuid  <code>instance-attribute</code>","text":"<pre><code>file_uuid\n</code></pre>"},{"location":"code_reference/models/file/#redbox.models.file.FileStatus.processing_status","title":"processing_status  <code>instance-attribute</code>","text":"<pre><code>processing_status\n</code></pre>"},{"location":"code_reference/models/file/#redbox.models.file.FileStatus.chunk_statuses","title":"chunk_statuses  <code>instance-attribute</code>","text":"<pre><code>chunk_statuses\n</code></pre>"},{"location":"code_reference/models/settings/","title":"<code>Settings</code>","text":"<p>Redbox used the <code>pydantic_settings</code> library to manage settings. This library allows for settings to be defined in a type-safe way using Pydantic models. This is done by creating a <code>Settings</code> class that inherits from <code>BaseSettings</code> and defines the settings as class attributes.</p>"},{"location":"code_reference/models/settings/#redbox.models.settings.Settings","title":"redbox.models.settings.Settings","text":"<p>               Bases: <code>BaseSettings</code></p> <p>Settings for the redbox application.</p>"},{"location":"code_reference/models/settings/#redbox.models.settings.Settings.ai","title":"ai  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ai = AISettings()\n</code></pre>"},{"location":"code_reference/models/settings/#redbox.models.settings.Settings.anthropic_api_key","title":"anthropic_api_key  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>anthropic_api_key = None\n</code></pre>"},{"location":"code_reference/models/settings/#redbox.models.settings.Settings.openai_api_key","title":"openai_api_key  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>openai_api_key = 'NotAKey'\n</code></pre>"},{"location":"code_reference/models/settings/#redbox.models.settings.Settings.azure_openai_api_key","title":"azure_openai_api_key  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>azure_openai_api_key = 'NotAKey'\n</code></pre>"},{"location":"code_reference/models/settings/#redbox.models.settings.Settings.azure_openai_endpoint","title":"azure_openai_endpoint  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>azure_openai_endpoint = None\n</code></pre>"},{"location":"code_reference/models/settings/#redbox.models.settings.Settings.openai_api_version","title":"openai_api_version  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>openai_api_version = '2023-12-01-preview'\n</code></pre>"},{"location":"code_reference/models/settings/#redbox.models.settings.Settings.azure_api_version_embeddings","title":"azure_api_version_embeddings  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>azure_api_version_embeddings = '2024-02-01'\n</code></pre>"},{"location":"code_reference/models/settings/#redbox.models.settings.Settings.azure_openai_model","title":"azure_openai_model  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>azure_openai_model = 'azure/gpt-35-turbo-16k'\n</code></pre>"},{"location":"code_reference/models/settings/#redbox.models.settings.Settings.azure_embedding_model","title":"azure_embedding_model  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>azure_embedding_model = 'text-embedding-3-large'\n</code></pre>"},{"location":"code_reference/models/settings/#redbox.models.settings.Settings.llm_max_tokens","title":"llm_max_tokens  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>llm_max_tokens = 1024\n</code></pre>"},{"location":"code_reference/models/settings/#redbox.models.settings.Settings.embedding_backend","title":"embedding_backend  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>embedding_backend = 'azure'\n</code></pre>"},{"location":"code_reference/models/settings/#redbox.models.settings.Settings.embedding_max_retries","title":"embedding_max_retries  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>embedding_max_retries = 10\n</code></pre>"},{"location":"code_reference/models/settings/#redbox.models.settings.Settings.embedding_retry_min_seconds","title":"embedding_retry_min_seconds  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>embedding_retry_min_seconds = 10\n</code></pre>"},{"location":"code_reference/models/settings/#redbox.models.settings.Settings.embedding_retry_max_seconds","title":"embedding_retry_max_seconds  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>embedding_retry_max_seconds = 120\n</code></pre>"},{"location":"code_reference/models/settings/#redbox.models.settings.Settings.embedding_max_batch_size","title":"embedding_max_batch_size  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>embedding_max_batch_size = 512\n</code></pre>"},{"location":"code_reference/models/settings/#redbox.models.settings.Settings.embedding_document_field_name","title":"embedding_document_field_name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>embedding_document_field_name = 'embedding'\n</code></pre>"},{"location":"code_reference/models/settings/#redbox.models.settings.Settings.embedding_openai_base_url","title":"embedding_openai_base_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>embedding_openai_base_url = None\n</code></pre>"},{"location":"code_reference/models/settings/#redbox.models.settings.Settings.embedding_openai_model","title":"embedding_openai_model  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>embedding_openai_model = 'text-embedding-ada-002'\n</code></pre>"},{"location":"code_reference/models/settings/#redbox.models.settings.Settings.chat_backend","title":"chat_backend  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>chat_backend = 'azure'\n</code></pre>"},{"location":"code_reference/models/settings/#redbox.models.settings.Settings.partition_strategy","title":"partition_strategy  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>partition_strategy = 'fast'\n</code></pre>"},{"location":"code_reference/models/settings/#redbox.models.settings.Settings.clustering_strategy","title":"clustering_strategy  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>clustering_strategy = None\n</code></pre>"},{"location":"code_reference/models/settings/#redbox.models.settings.Settings.elastic","title":"elastic  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>elastic = ElasticLocalSettings()\n</code></pre>"},{"location":"code_reference/models/settings/#redbox.models.settings.Settings.elastic_root_index","title":"elastic_root_index  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>elastic_root_index = 'redbox-data'\n</code></pre>"},{"location":"code_reference/models/settings/#redbox.models.settings.Settings.kibana_system_password","title":"kibana_system_password  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>kibana_system_password = 'redboxpass'\n</code></pre>"},{"location":"code_reference/models/settings/#redbox.models.settings.Settings.metricbeat_internal_password","title":"metricbeat_internal_password  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>metricbeat_internal_password = 'redboxpass'\n</code></pre>"},{"location":"code_reference/models/settings/#redbox.models.settings.Settings.filebeat_internal_password","title":"filebeat_internal_password  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>filebeat_internal_password = 'redboxpass'\n</code></pre>"},{"location":"code_reference/models/settings/#redbox.models.settings.Settings.heartbeat_internal_password","title":"heartbeat_internal_password  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>heartbeat_internal_password = 'redboxpass'\n</code></pre>"},{"location":"code_reference/models/settings/#redbox.models.settings.Settings.monitoring_internal_password","title":"monitoring_internal_password  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>monitoring_internal_password = 'redboxpass'\n</code></pre>"},{"location":"code_reference/models/settings/#redbox.models.settings.Settings.beats_system_password","title":"beats_system_password  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>beats_system_password = 'redboxpass'\n</code></pre>"},{"location":"code_reference/models/settings/#redbox.models.settings.Settings.minio_host","title":"minio_host  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>minio_host = 'minio'\n</code></pre>"},{"location":"code_reference/models/settings/#redbox.models.settings.Settings.minio_port","title":"minio_port  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>minio_port = 9000\n</code></pre>"},{"location":"code_reference/models/settings/#redbox.models.settings.Settings.aws_access_key","title":"aws_access_key  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>aws_access_key = None\n</code></pre>"},{"location":"code_reference/models/settings/#redbox.models.settings.Settings.aws_secret_key","title":"aws_secret_key  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>aws_secret_key = None\n</code></pre>"},{"location":"code_reference/models/settings/#redbox.models.settings.Settings.aws_region","title":"aws_region  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>aws_region = 'eu-west-2'\n</code></pre>"},{"location":"code_reference/models/settings/#redbox.models.settings.Settings.bucket_name","title":"bucket_name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>bucket_name = 'redbox-storage-dev'\n</code></pre>"},{"location":"code_reference/models/settings/#redbox.models.settings.Settings.embedding_model","title":"embedding_model  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>embedding_model = 'all-mpnet-base-v2'\n</code></pre>"},{"location":"code_reference/models/settings/#redbox.models.settings.Settings.embed_queue_name","title":"embed_queue_name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>embed_queue_name = 'redbox-embedder-queue'\n</code></pre>"},{"location":"code_reference/models/settings/#redbox.models.settings.Settings.ingest_queue_name","title":"ingest_queue_name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ingest_queue_name = 'redbox-ingester-queue'\n</code></pre>"},{"location":"code_reference/models/settings/#redbox.models.settings.Settings.worker_ingest_min_chunk_size","title":"worker_ingest_min_chunk_size  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>worker_ingest_min_chunk_size = 120\n</code></pre>"},{"location":"code_reference/models/settings/#redbox.models.settings.Settings.worker_ingest_max_chunk_size","title":"worker_ingest_max_chunk_size  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>worker_ingest_max_chunk_size = 300\n</code></pre>"},{"location":"code_reference/models/settings/#redbox.models.settings.Settings.redis_host","title":"redis_host  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>redis_host = 'redis'\n</code></pre>"},{"location":"code_reference/models/settings/#redbox.models.settings.Settings.redis_port","title":"redis_port  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>redis_port = 6379\n</code></pre>"},{"location":"code_reference/models/settings/#redbox.models.settings.Settings.object_store","title":"object_store  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>object_store = 'minio'\n</code></pre>"},{"location":"code_reference/models/settings/#redbox.models.settings.Settings.dev_mode","title":"dev_mode  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>dev_mode = False\n</code></pre>"},{"location":"code_reference/models/settings/#redbox.models.settings.Settings.superuser_email","title":"superuser_email  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>superuser_email = None\n</code></pre>"},{"location":"code_reference/models/settings/#redbox.models.settings.Settings.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = SettingsConfigDict(env_file='.env', env_nested_delimiter='__', extra='allow', frozen=True)\n</code></pre>"},{"location":"code_reference/models/settings/#redbox.models.settings.Settings.redis_url","title":"redis_url  <code>property</code>","text":"<pre><code>redis_url\n</code></pre>"},{"location":"code_reference/models/settings/#redbox.models.settings.Settings.elasticsearch_client","title":"elasticsearch_client","text":"<pre><code>elasticsearch_client()\n</code></pre> Source code in <code>redbox-core/redbox/models/settings.py</code> <pre><code>def elasticsearch_client(self) -&gt; Elasticsearch:\n    if isinstance(self.elastic, ElasticLocalSettings):\n        log.info(\"Connecting to self managed Elasticsearch\")\n        log.info(\"Elasticsearch host = %s\", self.elastic.host)\n        return Elasticsearch(\n            hosts=[\n                {\n                    \"host\": self.elastic.host,\n                    \"port\": self.elastic.port,\n                    \"scheme\": self.elastic.scheme,\n                }\n            ],\n            basic_auth=(self.elastic.user, self.elastic.password),\n        )\n\n    log.info(\"Connecting to Elastic Cloud Cluster\")\n    log.info(\"Cloud ID = %s\", self.elastic.cloud_id)\n    log.info(\"Elastic Cloud API Key = %s\", self.elastic.api_key)\n\n    return Elasticsearch(cloud_id=self.elastic.cloud_id, api_key=self.elastic.api_key)\n</code></pre>"},{"location":"code_reference/models/settings/#redbox.models.settings.Settings.s3_client","title":"s3_client","text":"<pre><code>s3_client()\n</code></pre> Source code in <code>redbox-core/redbox/models/settings.py</code> <pre><code>def s3_client(self):\n    if self.object_store == \"minio\":\n        client = boto3.client(\n            \"s3\",\n            aws_access_key_id=self.aws_access_key or \"\",\n            aws_secret_access_key=self.aws_secret_key or \"\",\n            endpoint_url=f\"http://{self.minio_host}:{self.minio_port}\",\n        )\n\n    elif self.object_store == \"s3\":\n        client = boto3.client(\n            \"s3\",\n            aws_access_key_id=self.aws_access_key,\n            aws_secret_access_key=self.aws_secret_key,\n            region_name=self.aws_region,\n        )\n    elif self.object_store == \"moto\":\n        from moto import mock_aws\n\n        mock = mock_aws()\n        mock.start()\n\n        client = boto3.client(\n            \"s3\",\n            aws_access_key_id=self.aws_access_key,\n            aws_secret_access_key=self.aws_secret_key,\n            region_name=self.aws_region,\n        )\n    else:\n        raise NotImplementedError\n\n    return client\n</code></pre>"},{"location":"code_reference/models/settings/#elasticsearch-settings","title":"Elasticsearch Settings","text":"<p>Depending on the deployment scenarios we have two different ways to configure Elasticsearch: <code>ElasticLocalSettings</code> and <code>ElasticCloudSettings</code>.</p>"},{"location":"code_reference/models/settings/#elasticlocalsettings","title":"<code>ElasticLocalSettings</code>","text":""},{"location":"code_reference/models/settings/#redbox.models.settings.ElasticLocalSettings","title":"redbox.models.settings.ElasticLocalSettings","text":"<p>               Bases: <code>BaseModel</code></p> <p>settings required for a local/ec2 instance of elastic</p>"},{"location":"code_reference/models/settings/#redbox.models.settings.ElasticLocalSettings.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = SettingsConfigDict(frozen=True)\n</code></pre>"},{"location":"code_reference/models/settings/#redbox.models.settings.ElasticLocalSettings.host","title":"host  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>host = 'elasticsearch'\n</code></pre>"},{"location":"code_reference/models/settings/#redbox.models.settings.ElasticLocalSettings.port","title":"port  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>port = 9200\n</code></pre>"},{"location":"code_reference/models/settings/#redbox.models.settings.ElasticLocalSettings.scheme","title":"scheme  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>scheme = 'http'\n</code></pre>"},{"location":"code_reference/models/settings/#redbox.models.settings.ElasticLocalSettings.user","title":"user  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>user = 'elastic'\n</code></pre>"},{"location":"code_reference/models/settings/#redbox.models.settings.ElasticLocalSettings.version","title":"version  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>version = '8.11.0'\n</code></pre>"},{"location":"code_reference/models/settings/#redbox.models.settings.ElasticLocalSettings.password","title":"password  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>password = 'redboxpass'\n</code></pre>"},{"location":"code_reference/models/settings/#redbox.models.settings.ElasticLocalSettings.subscription_level","title":"subscription_level  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>subscription_level = 'basic'\n</code></pre>"},{"location":"code_reference/models/settings/#elasticcloudsettings","title":"<code>ElasticCloudSettings</code>","text":""},{"location":"code_reference/models/settings/#redbox.models.settings.ElasticCloudSettings","title":"redbox.models.settings.ElasticCloudSettings","text":"<p>               Bases: <code>BaseModel</code></p> <p>settings required for elastic-cloud</p>"},{"location":"code_reference/models/settings/#redbox.models.settings.ElasticCloudSettings.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = SettingsConfigDict(frozen=True)\n</code></pre>"},{"location":"code_reference/models/settings/#redbox.models.settings.ElasticCloudSettings.api_key","title":"api_key  <code>instance-attribute</code>","text":"<pre><code>api_key\n</code></pre>"},{"location":"code_reference/models/settings/#redbox.models.settings.ElasticCloudSettings.cloud_id","title":"cloud_id  <code>instance-attribute</code>","text":"<pre><code>cloud_id\n</code></pre>"},{"location":"code_reference/models/settings/#redbox.models.settings.ElasticCloudSettings.subscription_level","title":"subscription_level  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>subscription_level = 'basic'\n</code></pre>"},{"location":"code_reference/storage/","title":"Storage","text":"<p>The storage module provides a way to store and retrieve data from the backend database. We have abstracted it to provide a common interface to interact with the database. This allows us to switch between different databases without changing the code that interacts with the database.</p>"},{"location":"code_reference/storage/#abstract-storage","title":"Abstract Storage","text":""},{"location":"code_reference/storage/#redbox.storage.storage_handler.BaseStorageHandler","title":"redbox.storage.storage_handler.BaseStorageHandler","text":"<pre><code>BaseStorageHandler()\n</code></pre> <p>               Bases: <code>ABC</code></p> <p>Abstract Class for Storage Handler which manages all file and object IO the Redbox backend.</p> <p>Initialise the storage handler</p> Source code in <code>redbox-core/redbox/storage/storage_handler.py</code> <pre><code>@abstractmethod\ndef __init__(self):\n    \"\"\"Initialise the storage handler\"\"\"\n</code></pre>"},{"location":"code_reference/storage/#redbox.storage.storage_handler.BaseStorageHandler.model_type_map","title":"model_type_map  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_type_map = {lower(): _zfor v in [Chunk, File]}\n</code></pre>"},{"location":"code_reference/storage/#redbox.storage.storage_handler.BaseStorageHandler.get_model_by_model_type","title":"get_model_by_model_type","text":"<pre><code>get_model_by_model_type(model_type)\n</code></pre> PARAMETER DESCRIPTION <code>model_type</code> Source code in <code>redbox-core/redbox/storage/storage_handler.py</code> <pre><code>def get_model_by_model_type(self, model_type):\n    return self.model_type_map[model_type.lower()]\n</code></pre>"},{"location":"code_reference/storage/#redbox.storage.storage_handler.BaseStorageHandler.write_item","title":"write_item  <code>abstractmethod</code>","text":"<pre><code>write_item(item)\n</code></pre> <p>Write an object to a data store</p> PARAMETER DESCRIPTION <code>item</code> <p> TYPE: <code>PersistableModel</code> </p> Source code in <code>redbox-core/redbox/storage/storage_handler.py</code> <pre><code>@abstractmethod\ndef write_item(self, item: PersistableModel):\n    \"\"\"Write an object to a data store\"\"\"\n</code></pre>"},{"location":"code_reference/storage/#redbox.storage.storage_handler.BaseStorageHandler.write_items","title":"write_items  <code>abstractmethod</code>","text":"<pre><code>write_items(items)\n</code></pre> <p>Write a list of objects to a data store</p> PARAMETER DESCRIPTION <code>items</code> <p> TYPE: <code>list[PersistableModel]</code> </p> Source code in <code>redbox-core/redbox/storage/storage_handler.py</code> <pre><code>@abstractmethod\ndef write_items(self, items: list[PersistableModel]):\n    \"\"\"Write a list of objects to a data store\"\"\"\n</code></pre>"},{"location":"code_reference/storage/#redbox.storage.storage_handler.BaseStorageHandler.read_item","title":"read_item  <code>abstractmethod</code>","text":"<pre><code>read_item(item_uuid, model_type)\n</code></pre> <p>Read an object from a data store</p> PARAMETER DESCRIPTION <code>item_uuid</code> <p> TYPE: <code>UUID</code> </p> <code>model_type</code> <p> TYPE: <code>str</code> </p> Source code in <code>redbox-core/redbox/storage/storage_handler.py</code> <pre><code>@abstractmethod\ndef read_item(self, item_uuid: UUID, model_type: str):\n    \"\"\"Read an object from a data store\"\"\"\n</code></pre>"},{"location":"code_reference/storage/#redbox.storage.storage_handler.BaseStorageHandler.read_items","title":"read_items  <code>abstractmethod</code>","text":"<pre><code>read_items(item_uuids, model_type)\n</code></pre> <p>Read a list of objects from a data store</p> PARAMETER DESCRIPTION <code>item_uuids</code> <p> TYPE: <code>list[UUID]</code> </p> <code>model_type</code> <p> TYPE: <code>str</code> </p> Source code in <code>redbox-core/redbox/storage/storage_handler.py</code> <pre><code>@abstractmethod\ndef read_items(self, item_uuids: list[UUID], model_type: str):\n    \"\"\"Read a list of objects from a data store\"\"\"\n</code></pre>"},{"location":"code_reference/storage/#redbox.storage.storage_handler.BaseStorageHandler.update_item","title":"update_item  <code>abstractmethod</code>","text":"<pre><code>update_item(item)\n</code></pre> <p>Update an object in a data store</p> PARAMETER DESCRIPTION <code>item</code> <p> TYPE: <code>PersistableModel</code> </p> Source code in <code>redbox-core/redbox/storage/storage_handler.py</code> <pre><code>@abstractmethod\ndef update_item(self, item: PersistableModel):\n    \"\"\"Update an object in a data store\"\"\"\n</code></pre>"},{"location":"code_reference/storage/#redbox.storage.storage_handler.BaseStorageHandler.update_items","title":"update_items  <code>abstractmethod</code>","text":"<pre><code>update_items(items)\n</code></pre> <p>Update a list of objects in a data store</p> PARAMETER DESCRIPTION <code>items</code> <p> TYPE: <code>list[PersistableModel]</code> </p> Source code in <code>redbox-core/redbox/storage/storage_handler.py</code> <pre><code>@abstractmethod\ndef update_items(self, items: list[PersistableModel]):\n    \"\"\"Update a list of objects in a data store\"\"\"\n</code></pre>"},{"location":"code_reference/storage/#redbox.storage.storage_handler.BaseStorageHandler.delete_item","title":"delete_item  <code>abstractmethod</code>","text":"<pre><code>delete_item(item)\n</code></pre> <p>Delete an object from a data store</p> PARAMETER DESCRIPTION <code>item</code> <p> TYPE: <code>PersistableModel</code> </p> Source code in <code>redbox-core/redbox/storage/storage_handler.py</code> <pre><code>@abstractmethod\ndef delete_item(self, item: PersistableModel):\n    \"\"\"Delete an object from a data store\"\"\"\n</code></pre>"},{"location":"code_reference/storage/#redbox.storage.storage_handler.BaseStorageHandler.delete_items","title":"delete_items  <code>abstractmethod</code>","text":"<pre><code>delete_items(items)\n</code></pre> <p>Delete a list of objects from a data store</p> PARAMETER DESCRIPTION <code>items</code> <p> TYPE: <code>list[PersistableModel]</code> </p> Source code in <code>redbox-core/redbox/storage/storage_handler.py</code> <pre><code>@abstractmethod\ndef delete_items(self, items: list[PersistableModel]):\n    \"\"\"Delete a list of objects from a data store\"\"\"\n</code></pre>"},{"location":"code_reference/storage/#redbox.storage.storage_handler.BaseStorageHandler.list_all_items","title":"list_all_items  <code>abstractmethod</code>","text":"<pre><code>list_all_items(model_type, user_uuid)\n</code></pre> <p>List all objects of a given type from a data store</p> PARAMETER DESCRIPTION <code>model_type</code> <p> TYPE: <code>str</code> </p> <code>user_uuid</code> <p> TYPE: <code>UUID</code> </p> Source code in <code>redbox-core/redbox/storage/storage_handler.py</code> <pre><code>@abstractmethod\ndef list_all_items(self, model_type: str, user_uuid: UUID):\n    \"\"\"List all objects of a given type from a data store\"\"\"\n</code></pre>"},{"location":"code_reference/storage/#redbox.storage.storage_handler.BaseStorageHandler.read_all_items","title":"read_all_items  <code>abstractmethod</code>","text":"<pre><code>read_all_items(model_type, user_uuid)\n</code></pre> <p>Read all objects of a given type from a data store</p> PARAMETER DESCRIPTION <code>model_type</code> <p> TYPE: <code>str</code> </p> <code>user_uuid</code> <p> TYPE: <code>UUID</code> </p> Source code in <code>redbox-core/redbox/storage/storage_handler.py</code> <pre><code>@abstractmethod\ndef read_all_items(self, model_type: str, user_uuid: UUID):\n    \"\"\"Read all objects of a given type from a data store\"\"\"\n</code></pre>"},{"location":"code_reference/storage/#redbox.storage.storage_handler.BaseStorageHandler.get_file_chunks","title":"get_file_chunks  <code>abstractmethod</code>","text":"<pre><code>get_file_chunks(parent_file_uuid, user_uuid)\n</code></pre> <p>get chunks for a given file</p> PARAMETER DESCRIPTION <code>parent_file_uuid</code> <p> TYPE: <code>UUID</code> </p> <code>user_uuid</code> <p> TYPE: <code>UUID</code> </p> Source code in <code>redbox-core/redbox/storage/storage_handler.py</code> <pre><code>@abstractmethod\ndef get_file_chunks(self, parent_file_uuid: UUID, user_uuid: UUID) -&gt; list[Chunk]:\n    \"\"\"get chunks for a given file\"\"\"\n</code></pre>"},{"location":"code_reference/storage/elasticsearch_storage_handler/","title":"<code>ElasticsearchStorageHandler</code>","text":""},{"location":"code_reference/storage/elasticsearch_storage_handler/#redbox.storage.elasticsearch.ElasticsearchStorageHandler","title":"redbox.storage.elasticsearch.ElasticsearchStorageHandler","text":"<pre><code>ElasticsearchStorageHandler(es_client, root_index)\n</code></pre> <p>               Bases: <code>BaseStorageHandler</code></p> <p>Storage Handler for Elasticsearch</p> <p>Initialise the storage handler</p> PARAMETER DESCRIPTION <code>es_client</code> <p> TYPE: <code>Elasticsearch</code> </p> <code>root_index</code> <p> TYPE: <code>str</code> </p> PARAMETER DESCRIPTION <code>es_client</code> <p>Elasticsearch client</p> <p> TYPE: <code>Elasticsearch</code> </p> <code>root_index</code> <p>Root index to use. Defaults to \"redbox\".</p> <p> TYPE: <code>str</code> </p> Source code in <code>redbox-core/redbox/storage/elasticsearch.py</code> <pre><code>def __init__(\n    self,\n    es_client: Elasticsearch,\n    root_index: str,\n):\n    \"\"\"Initialise the storage handler\n\n    Args:\n        es_client (Elasticsearch): Elasticsearch client\n        root_index (str, optional): Root index to use. Defaults to \"redbox\".\n    \"\"\"\n    self.es_client = es_client\n    self.root_index = root_index\n</code></pre>"},{"location":"code_reference/storage/elasticsearch_storage_handler/#redbox.storage.elasticsearch.ElasticsearchStorageHandler.model_type_map","title":"model_type_map  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_type_map = {lower(): _Kfor v in [Chunk, File]}\n</code></pre>"},{"location":"code_reference/storage/elasticsearch_storage_handler/#redbox.storage.elasticsearch.ElasticsearchStorageHandler.es_client","title":"es_client  <code>instance-attribute</code>","text":"<pre><code>es_client = es_client\n</code></pre>"},{"location":"code_reference/storage/elasticsearch_storage_handler/#redbox.storage.elasticsearch.ElasticsearchStorageHandler.root_index","title":"root_index  <code>instance-attribute</code>","text":"<pre><code>root_index = root_index\n</code></pre>"},{"location":"code_reference/storage/elasticsearch_storage_handler/#redbox.storage.elasticsearch.ElasticsearchStorageHandler.get_model_by_model_type","title":"get_model_by_model_type","text":"<pre><code>get_model_by_model_type(model_type)\n</code></pre> PARAMETER DESCRIPTION <code>model_type</code> Source code in <code>redbox-core/redbox/storage/storage_handler.py</code> <pre><code>def get_model_by_model_type(self, model_type):\n    return self.model_type_map[model_type.lower()]\n</code></pre>"},{"location":"code_reference/storage/elasticsearch_storage_handler/#redbox.storage.elasticsearch.ElasticsearchStorageHandler.refresh","title":"refresh","text":"<pre><code>refresh(index='*')\n</code></pre> PARAMETER DESCRIPTION <code>index</code> <p> TYPE: <code>str</code> DEFAULT: <code>'*'</code> </p> Source code in <code>redbox-core/redbox/storage/elasticsearch.py</code> <pre><code>def refresh(self, index: str = \"*\") -&gt; ObjectApiResponse:\n    return self.es_client.indices.refresh(index=f\"{self.root_index}-{index}\")\n</code></pre>"},{"location":"code_reference/storage/elasticsearch_storage_handler/#redbox.storage.elasticsearch.ElasticsearchStorageHandler.write_item","title":"write_item","text":"<pre><code>write_item(item)\n</code></pre> PARAMETER DESCRIPTION <code>item</code> <p> TYPE: <code>PersistableModel</code> </p> Source code in <code>redbox-core/redbox/storage/elasticsearch.py</code> <pre><code>def write_item(self, item: PersistableModel) -&gt; ObjectApiResponse:\n    target_index = f\"{self.root_index}-{item.model_type.lower()}\"\n\n    return self.es_client.index(\n        index=target_index,\n        id=str(item.uuid),\n        body=item.model_dump(mode=\"json\"),\n    )\n</code></pre>"},{"location":"code_reference/storage/elasticsearch_storage_handler/#redbox.storage.elasticsearch.ElasticsearchStorageHandler.write_items","title":"write_items","text":"<pre><code>write_items(items)\n</code></pre> PARAMETER DESCRIPTION <code>items</code> <p> TYPE: <code>Sequence[PersistableModel]</code> </p> Source code in <code>redbox-core/redbox/storage/elasticsearch.py</code> <pre><code>def write_items(self, items: Sequence[PersistableModel]) -&gt; Sequence[ObjectApiResponse]:\n    return list(map(self.write_item, items))\n</code></pre>"},{"location":"code_reference/storage/elasticsearch_storage_handler/#redbox.storage.elasticsearch.ElasticsearchStorageHandler.read_item","title":"read_item","text":"<pre><code>read_item(item_uuid, model_type)\n</code></pre> PARAMETER DESCRIPTION <code>item_uuid</code> <p> TYPE: <code>UUID</code> </p> <code>model_type</code> <p> TYPE: <code>str</code> </p> Source code in <code>redbox-core/redbox/storage/elasticsearch.py</code> <pre><code>def read_item(self, item_uuid: UUID, model_type: str):\n    target_index = f\"{self.root_index}-{model_type.lower()}\"\n    result = self.es_client.get(index=target_index, id=str(item_uuid))\n    model = self.get_model_by_model_type(model_type)\n    return model(**result.body[\"_source\"])\n</code></pre>"},{"location":"code_reference/storage/elasticsearch_storage_handler/#redbox.storage.elasticsearch.ElasticsearchStorageHandler.read_items","title":"read_items","text":"<pre><code>read_items(item_uuids, model_type)\n</code></pre> PARAMETER DESCRIPTION <code>item_uuids</code> <p> TYPE: <code>list[UUID]</code> </p> <code>model_type</code> <p> TYPE: <code>str</code> </p> Source code in <code>redbox-core/redbox/storage/elasticsearch.py</code> <pre><code>def read_items(self, item_uuids: list[UUID], model_type: str):\n    target_index = f\"{self.root_index}-{model_type.lower()}\"\n    result = self.es_client.mget(index=target_index, body={\"ids\": list(map(str, item_uuids))})\n\n    model = self.get_model_by_model_type(model_type)\n    return [model(**item[\"_source\"]) for item in result.body[\"docs\"]]\n</code></pre>"},{"location":"code_reference/storage/elasticsearch_storage_handler/#redbox.storage.elasticsearch.ElasticsearchStorageHandler.update_item","title":"update_item","text":"<pre><code>update_item(item)\n</code></pre> PARAMETER DESCRIPTION <code>item</code> <p> TYPE: <code>PersistableModel</code> </p> Source code in <code>redbox-core/redbox/storage/elasticsearch.py</code> <pre><code>def update_item(self, item: PersistableModel) -&gt; ObjectApiResponse:\n    target_index = f\"{self.root_index}-{item.model_type.lower()}\"\n\n    return self.es_client.index(\n        index=target_index,\n        id=str(item.uuid),\n        body=item.model_dump(mode=\"json\"),\n    )\n</code></pre>"},{"location":"code_reference/storage/elasticsearch_storage_handler/#redbox.storage.elasticsearch.ElasticsearchStorageHandler.update_items","title":"update_items","text":"<pre><code>update_items(items)\n</code></pre> PARAMETER DESCRIPTION <code>items</code> <p> TYPE: <code>list[PersistableModel]</code> </p> Source code in <code>redbox-core/redbox/storage/elasticsearch.py</code> <pre><code>def update_items(self, items: list[PersistableModel]) -&gt; list[ObjectApiResponse]:\n    return list(map(self.update_item, items))\n</code></pre>"},{"location":"code_reference/storage/elasticsearch_storage_handler/#redbox.storage.elasticsearch.ElasticsearchStorageHandler.delete_item","title":"delete_item","text":"<pre><code>delete_item(item)\n</code></pre> PARAMETER DESCRIPTION <code>item</code> <p> TYPE: <code>PersistableModel</code> </p> Source code in <code>redbox-core/redbox/storage/elasticsearch.py</code> <pre><code>def delete_item(self, item: PersistableModel) -&gt; ObjectApiResponse:\n    target_index = f\"{self.root_index}-{item.model_type.lower()}\"\n    return self.es_client.delete(index=target_index, id=str(item.uuid))\n</code></pre>"},{"location":"code_reference/storage/elasticsearch_storage_handler/#redbox.storage.elasticsearch.ElasticsearchStorageHandler.delete_items","title":"delete_items","text":"<pre><code>delete_items(items)\n</code></pre> PARAMETER DESCRIPTION <code>items</code> <p> TYPE: <code>list[PersistableModel]</code> </p> Source code in <code>redbox-core/redbox/storage/elasticsearch.py</code> <pre><code>def delete_items(self, items: list[PersistableModel]) -&gt; ObjectApiResponse | None:\n    if not items:\n        return None\n\n    if len({item.model_type for item in items}) &gt; 1:\n        message = \"Items with differing model types: {item.model_type for item in items}\"\n        raise ValueError(message)\n    model_type = items[0].model_type\n    target_index = f\"{self.root_index}-{model_type.lower()}\"\n    return self.es_client.delete_by_query(\n        index=target_index,\n        body={\"query\": {\"terms\": {\"_id\": [str(item.uuid) for item in items]}}},\n    )\n</code></pre>"},{"location":"code_reference/storage/elasticsearch_storage_handler/#redbox.storage.elasticsearch.ElasticsearchStorageHandler.read_all_items","title":"read_all_items","text":"<pre><code>read_all_items(model_type, user_uuid)\n</code></pre> PARAMETER DESCRIPTION <code>model_type</code> <p> TYPE: <code>str</code> </p> <code>user_uuid</code> <p> TYPE: <code>UUID</code> </p> Source code in <code>redbox-core/redbox/storage/elasticsearch.py</code> <pre><code>def read_all_items(self, model_type: str, user_uuid: UUID) -&gt; list[PersistableModel]:\n    target_index = f\"{self.root_index}-{model_type.lower()}\"\n    try:\n        result = scan(\n            client=self.es_client,\n            index=target_index,\n            query={\n                \"query\": {\n                    \"bool\": {\n                        \"should\": [\n                            {\"term\": {\"creator_user_uuid.keyword\": str(user_uuid)}},\n                            {\"term\": {\"metadata.creator_user_uuid.keyword\": str(user_uuid)}},\n                        ]\n                    }\n                }\n            },\n            _source=True,\n        )\n\n    except NotFoundError:\n        log.info(\"Index %s not found. Returning empty list.\", target_index)\n        return []\n\n    # Grab the model we'll use to deserialize the items\n    model = self.get_model_by_model_type(model_type)\n    try:\n        results = list(result)\n    except NotFoundError:\n        return []\n\n    items = []\n    for item in results:\n        try:\n            items.append(model(**item[\"_source\"]))\n        except ValidationError as e:\n            log.exception(\"Validation exception for %s\", item, exc_info=e)\n    return items\n</code></pre>"},{"location":"code_reference/storage/elasticsearch_storage_handler/#redbox.storage.elasticsearch.ElasticsearchStorageHandler.list_all_items","title":"list_all_items","text":"<pre><code>list_all_items(model_type, user_uuid)\n</code></pre> PARAMETER DESCRIPTION <code>model_type</code> <p> TYPE: <code>str</code> </p> <code>user_uuid</code> <p> TYPE: <code>UUID</code> </p> Source code in <code>redbox-core/redbox/storage/elasticsearch.py</code> <pre><code>def list_all_items(self, model_type: str, user_uuid: UUID) -&gt; list[UUID]:\n    target_index = f\"{self.root_index}-{model_type.lower()}\"\n    try:\n        # Only return _id\n        results = scan(\n            client=self.es_client,\n            index=target_index,\n            query={\n                \"query\": {\n                    \"bool\": {\n                        \"should\": [\n                            {\"term\": {\"creator_user_uuid.keyword\": str(user_uuid)}},\n                            {\"term\": {\"metadata.creator_user_uuid.keyword\": str(user_uuid)}},\n                        ]\n                    }\n                }\n            },\n            _source=False,\n        )\n\n    except NotFoundError:\n        log.info(\"Index %s not found. Returning empty list.\", target_index)\n        return []\n    return [UUID(item[\"_id\"]) for item in results]\n</code></pre>"},{"location":"code_reference/storage/elasticsearch_storage_handler/#redbox.storage.elasticsearch.ElasticsearchStorageHandler.get_file_chunks","title":"get_file_chunks","text":"<pre><code>get_file_chunks(parent_file_uuid, user_uuid)\n</code></pre> <p>get chunks for a given file</p> PARAMETER DESCRIPTION <code>parent_file_uuid</code> <p> TYPE: <code>UUID</code> </p> <code>user_uuid</code> <p> TYPE: <code>UUID</code> </p> Source code in <code>redbox-core/redbox/storage/elasticsearch.py</code> <pre><code>def get_file_chunks(self, parent_file_uuid: UUID, user_uuid: UUID) -&gt; list[Chunk]:\n    \"\"\"get chunks for a given file\"\"\"\n    target_index = f\"{self.root_index}-chunk\"\n\n    return [\n        hit_to_chunk(item)\n        for item in scan(\n            client=self.es_client,\n            index=target_index,\n            query=build_chunk_query(parent_file_uuid, user_uuid),\n        )\n    ]\n</code></pre>"},{"location":"code_reference/storage/elasticsearch_storage_handler/#redbox.storage.elasticsearch.ElasticsearchStorageHandler.delete_file_chunks","title":"delete_file_chunks","text":"<pre><code>delete_file_chunks(parent_file_uuid, user_uuid)\n</code></pre> <p>delete chunks for a given file</p> PARAMETER DESCRIPTION <code>parent_file_uuid</code> <p> TYPE: <code>UUID</code> </p> <code>user_uuid</code> <p> TYPE: <code>UUID</code> </p> Source code in <code>redbox-core/redbox/storage/elasticsearch.py</code> <pre><code>def delete_file_chunks(self, parent_file_uuid: UUID, user_uuid: UUID):\n    \"\"\"delete chunks for a given file\"\"\"\n    target_index = f\"{self.root_index}-chunk\"\n\n    self.es_client.delete_by_query(\n        index=target_index,\n        body=build_chunk_query(parent_file_uuid, user_uuid),\n    )\n</code></pre>"},{"location":"code_reference/storage/elasticsearch_storage_handler/#redbox.storage.elasticsearch.ElasticsearchStorageHandler.get_file_status","title":"get_file_status","text":"<pre><code>get_file_status(file_uuid, user_uuid)\n</code></pre> <p>Get the status of a file and associated Chunks</p> PARAMETER DESCRIPTION <code>file_uuid</code> <p> TYPE: <code>UUID</code> </p> <code>user_uuid</code> <p> TYPE: <code>UUID</code> </p> PARAMETER DESCRIPTION <code>file_uuid</code> <p>The UUID of the file to get the status of</p> <p> TYPE: <code>UUID</code> </p> <code>user_uuid</code> <p>the UUID of the user</p> <p> TYPE: <code>UUID</code> </p> RETURNS DESCRIPTION <code>FileStatus</code> <p>The status of the file</p> <p> TYPE: <code>FileStatus</code> </p> Source code in <code>redbox-core/redbox/storage/elasticsearch.py</code> <pre><code>def get_file_status(self, file_uuid: UUID, user_uuid: UUID) -&gt; FileStatus:\n    \"\"\"Get the status of a file and associated Chunks\n\n    Args:\n        file_uuid (UUID): The UUID of the file to get the status of\n        user_uuid (UUID): the UUID of the user\n\n    Returns:\n        FileStatus: The status of the file\n    \"\"\"\n\n    # Test 1: Get the file\n    try:\n        file = self.read_item(file_uuid, \"File\")\n    except NotFoundError as e:\n        log.exception(\"file/%s not found\", file_uuid)\n        message = f\"File {file_uuid} not found\"\n        raise ValueError(message) from e\n    if file.creator_user_uuid != user_uuid:\n        log.error(\"file/%s.%s not owned by %s\", file_uuid, file.creator_user_uuid, user_uuid)\n        message = f\"File {file_uuid} not found\"\n        raise ValueError(message)\n\n    # Test 2: Get the number of chunks for the file\n    chunks = self.get_file_chunks(file_uuid, file.creator_user_uuid)\n\n    if not chunks:\n        # File has not been chunked yet\n        return FileStatus(\n            file_uuid=file_uuid,\n            chunk_statuses=[],\n            processing_status=ProcessingStatusEnum.embedding,\n        )\n\n    # Test 3: Determine the number of embedded chunks for the file\n    chunk_statuses = [ChunkStatus(chunk_uuid=chunk.uuid, embedded=bool(chunk.embedding)) for chunk in chunks]\n\n    # Test 4: Determine the latest status\n    is_complete = all(chunk_status.embedded for chunk_status in chunk_statuses)\n\n    return FileStatus(\n        file_uuid=file_uuid,\n        chunk_statuses=chunk_statuses,\n        processing_status=ProcessingStatusEnum.complete if is_complete else ProcessingStatusEnum.embedding,\n    )\n</code></pre>"},{"location":"frontends/","title":"Frontends","text":"<p>This page lists the frontends that are available for the the Redbox backend.</p> <ul> <li>Streamlit -  A lightweight frontend, ideal for demos and quick prototyping.</li> <li>Django - A full-featured frontend, ideal for production deployments.</li> </ul>"},{"location":"frontends/#motivations","title":"Motivations","text":"<p>We decided to have a clear separation between the backend and the frontend. This is because we know that each Government department has different requirements and business logic for the front end. By having a clear separation between the backend and the frontend, we can allow each department to build their own front end that suits their needs.</p>"},{"location":"frontends/#django","title":"Django","text":""},{"location":"frontends/#streamlit","title":"Streamlit","text":""},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#step-1-requirements","title":"Step 1: Requirements","text":"<p>In this section we will cover some of the key dependencies for all of the deployment modes.</p> <ul> <li>Docker - For building and running containers</li> <li>Docker Compose - For managing multiple containers</li> <li>Python 3.12 - For intellisense and linting (not explicitly needed to run the project due to docker, but recommended for development)</li> <li>pip - For installing poetry</li> <li>poetry - For managing python packages</li> <li>Make - For running commands in the <code>Makefile</code></li> <li>Poppler - For Document Ingestion and OCR</li> <li>Tesseract - For Document Ingestion and OCR</li> </ul>"},{"location":"installation/#brew","title":"Brew","text":"<p>If you're on a Mac, you can install the above dependencies using brew. </p> <pre><code>brew install docker docker-compose make poppler tesseract\n</code></pre>"},{"location":"installation/#ubuntudebian","title":"Ubuntu/Debian","text":"<p>If you're on Ubuntu/Debian, you can install the above dependencies using <code>apt</code>.</p> <pre><code>sudo apt update\nsudo apt install docker docker-compose make poppler-utils tesseract-ocr\n</code></pre> <p>If you don't have this python version, we'd recommend using pyenv to manage your python versions.</p>"},{"location":"installation/#step-2-installation-and-build","title":"Step 2: Installation and Build","text":"<p>We'll need to clone the repository and install the dependencies.</p> <pre><code>git clone git@github.com:i-dot-ai/redbox.git\ncd redbox\npoetry install\n</code></pre> <p>This may take a while as it installs all the dependencies on a first run.</p> <p>To build the project, you can use the following command:</p> <pre><code>make build\n</code></pre> <p>or </p> <pre><code>docker compose build\n</code></pre> <p>At the end of the you can view all of the built images with this command:</p> <pre><code>docker images | grep redbox\n</code></pre>"},{"location":"installation/#step-3-setting-up-the-environment","title":"Step 3: Setting up the environment","text":"<p>The project uses a <code>.env</code> file to store environment variables. You can copy the <code>.env.example</code> file to <code>.env</code> and fill in the necessary variables.</p> <pre><code>cp .env.example .env\n</code></pre> <p>Depending on the Large Language Model provider you choose, you will need to fill appropriate API keys in the <code>.env</code> file. You can find more detail on that here: LLM Setup</p>"},{"location":"installation/#step-4-running-the-project","title":"Step 4: Running the project","text":"<p>From this point you can now go to the following pages to run the project:</p> <ul> <li>Local Development</li> <li>AWS Deployment</li> </ul> <p>At the moment, we only support local development and AWS deployment due to the skillsets of the current development team. Redbox would welcome any contributions to help expand deployments to Azure, GCP, Orcacle Cloud, Kubernetes, etc. If you would like to add support for a new deployment mode please refer to the contribution guidelines and create a pull request with the necessary changes. Please refer to the email link in the footer if you'd like to discuss with the team.</p>"},{"location":"installation/aws/","title":"AWS Deployment","text":"<p>This guide is currently a work in progress. If you have any questions or suggestions, please feel free to open an issue, pull request or discussion in Github.</p>"},{"location":"installation/aws/#terrraform","title":"Terrraform","text":"<p>We use Terraform to manage our AWS infrastructure. You can find the Terraform code in the <code>terraform</code> directory.</p>"},{"location":"installation/llm_setup/","title":"Large Language Model Setup","text":"<p>Redbox uses LiteLLM as an abstract wrapper around different Large Language Models (LLMs). This allows us to switch between different LLMs without changing the codebase. Currently, we have tested the following LLM providers:</p> <ul> <li>OpenAI<ul> <li><code>gpt-3.5-turbo</code></li> <li><code>gpt-3.5-16k</code></li> <li><code>gpt-4</code></li> <li><code>gpt-4-32k</code></li> <li><code>gpt-4-turbo</code></li> <li><code>gpt-4o</code></li> </ul> </li> <li>Azure OpenAI Service<ul> <li><code>gpt-3.5-turbo</code></li> <li><code>gpt-3.5-16k</code></li> <li><code>gpt-4</code></li> <li><code>gpt-4-32k</code></li> <li><code>gpt-4-turbo</code></li> <li><code>gpt-4o</code></li> </ul> </li> </ul> <p>Please note that exclusion from this list does not mean that the LLM is not supported, it just means that we have not tested it yet. If you would like to use a different LLM, please refer to the LiteLLM documentation</p>"},{"location":"installation/llm_setup/#openai","title":"OpenAI","text":"<p>To use OpenAI as the LLM provider, you will need to set the following environment variables in your <code>.env</code> file:</p> <pre><code>OPENAI_API_KEY=your_openai_api_key\n</code></pre>"},{"location":"installation/llm_setup/#azure-openai-service","title":"Azure OpenAI Service","text":"<p>To use Azure OpenAI Service as the LLM provider, you will need to set the following environment variables in your <code>.env</code> file:</p> <pre><code>AZURE_OPENAI_API_KEY=your_azure_openai_api_key\nAZURE_OPENAI_ENDPOINT=your_azure_openai_endpoint\nAZURE_OPENAI_MODEL=azure/your_azure_openai_deployment_name\n</code></pre> <p>LiteLLM Note</p> <p>Please note that <code>AZURE_OPENAI_MODEL</code> has <code>azure/</code> as a prefix. This is because LiteLLM uses the <code>provider/model</code> format to specify the model.</p>"},{"location":"installation/llm_setup/#other-providers","title":"Other Providers","text":"<p>Redbox would welcome any contributions to add support for other LLM providers. If you would like to add support for a new provider, please refer to the LiteLLM documentation and create a pull request with the necessary changes. Please refer to the contribution guidelines for more information on how to contribute to Redbox.</p>"},{"location":"installation/local/","title":"Local Development/Deployment","text":"<p>This guide will help you set up the project for local development and the simplest deployment for Redbox. For the initial steps, please refer to the installation guide. That guide will help you set up the project and install the necessary dependencies for this guide.</p>"},{"location":"installation/local/#step-5-running-the-project","title":"Step 5: Running the project","text":"<p>To run the project locally make sure you're in the root directory of the repo, then you can use the following command:</p> <pre><code>make run\n</code></pre> <p>or </p> <pre><code>docker compose up -d\n</code></pre> <p>Makefile tip</p> <p>If you're using the Makefile, you can use the <code>make</code> command to list all of the available commands.</p> <p>As the project deploys, you should eventually see the following message:</p> <pre><code>[+] Running 8/8\n \u2714 Network redbox_redbox-app-network  Created                                                                       0.0s \n \u2714 Container redbox-elasticsearch-1   Healthy                                                                      22.7s \n \u2714 Container redbox-redis-1           Healthy                                                                      22.7s \n \u2714 Container redbox-minio-1           Healthy                                                                      22.7s \n \u2714 Container redbox-db-1              Healthy                                                                      22.7s \n \u2714 Container redbox-worker-1          Healthy                                                                      22.7s \n \u2714 Container redbox-core-api-1        Healthy                                                                      22.6s \n \u2714 Container redbox-django-app-1      Healthy                                                                      32.6s \n</code></pre> <p>Redbox utilises health checks to ensure that the services are running correctly.</p>"},{"location":"installation/local/#step-6-setting-up-minio","title":"Step 6: Setting up MinIO","text":"<p>MinIO is an object storage server that is compatible with Amazon S3. It is used to store the documents that are used by the application. To set up MinIO, you can navigate to <code>http://localhost:9001</code> in your browser. You should see the following screen:</p> <p></p> <p>The default credentials are:</p> <ul> <li>Username: <code>minioadmin</code></li> <li>Password: <code>minioadmin</code></li> </ul> <p>Once logged in, you need to create a bucket by clicking on the <code>Buckets</code> tab on the left of the screen and clicking <code>Create Bucket +</code>. You can name the bucket <code>redbox-storage-dev</code> and leave the rest of the settings as default.</p> <p>Important</p> <p>The bucket name must be <code>redbox-storage-dev</code> or the application will not work correctly.</p> <p>For debugging, you can now access <code>http://localhost:9001/buckets/redbox-storage-dev/admin/summary</code> to see the contents of the bucket and inspect files.</p>"},{"location":"installation/local/#step-7-accessing-the-application","title":"Step 7: Accessing the application","text":"<p>Once the project is running, you can access the application by navigating to <code>http://localhost:8090</code> in your browser. You should see the following screen:</p> <p></p>"},{"location":"installation/local/#step-8-setting-up-django-admin","title":"Step 8: Setting up Django Admin","text":"<p>To create an admin user, you can run the following command:</p> <pre><code>docker compose run django-app venv/bin/django-admin createsuperuser\n</code></pre> <p>You will be prompted to enter an email and a password. These can be anything you like as the development mode doesn't send emails or use passwords for authentication. Instead we use magic links. Once the superuser is created, you can log in to the Django admin interface by navigating to <code>http://localhost:8090/sign-in</code> and entering the email you just created.</p> <p></p> <p>After entering the email, you will be prompted to press \"Continue\". Once you do this, you can navigate to your terminal and run the following command:</p> <pre><code>docker compose logs django-app | grep 8090/magic_link\n</code></pre> <p>This command will output a URL that you can click on to log in to the Django admin interface.</p> <pre><code>django-app-1  | http://localhost:8090/magic_link/5f6a67a2-dcf4-4bbb-8b00-817294d1f251/\n</code></pre>"},{"location":"installation/local/#step-9-uploading-a-file","title":"Step 9: Uploading a File","text":"<p>Once you're logged in, you will see a screen for collecting details about the user. This is currently geared towards Civil Service users, but you skip this step by clicking the \"Skip\" button. You will then be taken to the main page of the application.</p> <p></p> <p>From here you can upload documents to be added to the system and view the documents that are already in the system.</p> <p></p> <p>In a few moments, you should see the document you uploaded turn green as completed. There is an embedding stage that can take some time based on the size of the document and the capacity of your embedding model. </p>"},{"location":"installation/local/#step-10-chat-with-the-document","title":"Step 10: Chat with the document","text":"<p>Once the document is processed, you can click on the Chats tab to see the document and chat with it.</p> <p></p> <p>You can ask questions about the document and the system will try to answer them based on the content of the document.</p>"},{"location":"installation/local/#step-11-acessing-the-admin-interface","title":"Step 11: Acessing the Admin Interface","text":"<p>You can access the admin interface by navigating to <code>http://localhost:8090/admin</code> and logging in with the superuser you created earlier. Here you can manage users, documents, chat histories and other parts of the system.</p>"},{"location":"installation/local/#step-12-shutting-down-the-project","title":"Step 12: Shutting down the project","text":"<p>To shut down the project, you can run the following command:</p> <pre><code>docker compose down\n</code></pre> <p>This will stop all the services and remove the containers. If you want to remove the volumes as well, you can run:</p> <pre><code>docker compose down -v\n</code></pre>"}]}